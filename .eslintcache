[{"D:\\Code\\swap-interface-v1\\src\\index.tsx":"1","D:\\Code\\swap-interface-v1\\src\\i18n.ts":"2","D:\\Code\\swap-interface-v1\\src\\style\\Global.ts":"3","D:\\Code\\swap-interface-v1\\src\\state\\lists\\updater.ts":"4","D:\\Code\\swap-interface-v1\\src\\state\\application\\updater.ts":"5","D:\\Code\\swap-interface-v1\\src\\Providers.tsx":"6","D:\\Code\\swap-interface-v1\\src\\pages\\App.tsx":"7","D:\\Code\\swap-interface-v1\\src\\state\\transactions\\updater.tsx":"8","D:\\Code\\swap-interface-v1\\src\\state\\multicall\\updater.tsx":"9","D:\\Code\\swap-interface-v1\\src\\state\\lists\\actions.ts":"10","D:\\Code\\swap-interface-v1\\src\\state\\application\\actions.ts":"11","D:\\Code\\swap-interface-v1\\src\\hooks\\useFetchListCallback.ts":"12","D:\\Code\\swap-interface-v1\\src\\hooks\\useInterval.ts":"13","D:\\Code\\swap-interface-v1\\src\\hooks\\useIsWindowVisible.ts":"14","D:\\Code\\swap-interface-v1\\src\\hooks\\useDebounce.ts":"15","D:\\Code\\swap-interface-v1\\src\\hooks\\LanguageContext.ts":"16","D:\\Code\\swap-interface-v1\\src\\hooks\\TranslationsContext.ts":"17","D:\\Code\\swap-interface-v1\\src\\hooks\\useGetDocumentTitlePrice.ts":"18","D:\\Code\\swap-interface-v1\\src\\utils\\getLibrary.ts":"19","D:\\Code\\swap-interface-v1\\src\\state\\transactions\\actions.ts":"20","D:\\Code\\swap-interface-v1\\src\\hooks\\useContract.ts":"21","D:\\Code\\swap-interface-v1\\src\\utils\\chunkArray.ts":"22","D:\\Code\\swap-interface-v1\\src\\state\\application\\hooks.ts":"23","D:\\Code\\swap-interface-v1\\src\\state\\multicall\\actions.ts":"24","D:\\Code\\swap-interface-v1\\src\\utils\\retry.ts":"25","D:\\Code\\swap-interface-v1\\src\\components\\ToastListener\\index.tsx":"26","D:\\Code\\swap-interface-v1\\src\\ThemeContext.tsx":"27","D:\\Code\\swap-interface-v1\\src\\constants\\localisation\\languageCodes.ts":"28","D:\\Code\\swap-interface-v1\\src\\pages\\AddLiquidity\\redirects.tsx":"29","D:\\Code\\swap-interface-v1\\src\\pages\\Swap\\redirects.tsx":"30","D:\\Code\\swap-interface-v1\\src\\pages\\RemoveLiquidity\\redirects.tsx":"31","D:\\Code\\swap-interface-v1\\src\\state\\index.ts":"32","D:\\Code\\swap-interface-v1\\src\\hooks\\index.ts":"33","D:\\Code\\swap-interface-v1\\src\\constants\\index.ts":"34","D:\\Code\\swap-interface-v1\\src\\utils\\resolveENSContentHash.ts":"35","D:\\Code\\swap-interface-v1\\src\\utils\\getTokenList.ts":"36","D:\\Code\\swap-interface-v1\\src\\constants\\abis\\erc20.ts":"37","D:\\Code\\swap-interface-v1\\src\\pages\\AddLiquidity\\index.tsx":"38","D:\\Code\\swap-interface-v1\\src\\pages\\RemoveLiquidity\\index.tsx":"39","D:\\Code\\swap-interface-v1\\src\\pages\\Swap\\index.tsx":"40","D:\\Code\\swap-interface-v1\\src\\components\\Popups\\index.tsx":"41","D:\\Code\\swap-interface-v1\\src\\components\\Web3ReactManager\\index.tsx":"42","D:\\Code\\swap-interface-v1\\src\\pages\\Pool\\index.tsx":"43","D:\\Code\\swap-interface-v1\\src\\pages\\PoolFinder\\index.tsx":"44","D:\\Code\\swap-interface-v1\\src\\pages\\Migration\\index.tsx":"45","D:\\Code\\swap-interface-v1\\src\\components\\AppHeader\\index.jsx":"46","D:\\Code\\swap-interface-v1\\src\\components\\AppFooter\\index.jsx":"47","D:\\Code\\swap-interface-v1\\src\\state\\application\\reducer.ts":"48","D:\\Code\\swap-interface-v1\\src\\state\\transactions\\reducer.ts":"49","D:\\Code\\swap-interface-v1\\src\\state\\lists\\reducer.ts":"50","D:\\Code\\swap-interface-v1\\src\\utils\\theme.ts":"51","D:\\Code\\swap-interface-v1\\src\\state\\multicall\\reducer.ts":"52","D:\\Code\\swap-interface-v1\\src\\state\\swap\\reducer.ts":"53","D:\\Code\\swap-interface-v1\\src\\state\\global\\actions.ts":"54","D:\\Code\\swap-interface-v1\\src\\state\\user\\reducer.ts":"55","D:\\Code\\swap-interface-v1\\src\\state\\mint\\reducer.ts":"56","D:\\Code\\swap-interface-v1\\src\\state\\burn\\reducer.ts":"57","D:\\Code\\swap-interface-v1\\src\\utils\\index.ts":"58","D:\\Code\\swap-interface-v1\\src\\connectors\\index.ts":"59","D:\\Code\\swap-interface-v1\\src\\utils\\useGetCakeBusdLpPrice.ts":"60","D:\\Code\\swap-interface-v1\\src\\constants\\multicall\\index.ts":"61","D:\\Code\\swap-interface-v1\\src\\hooks\\useToast.ts":"62","D:\\Code\\swap-interface-v1\\src\\pages\\Migration\\FAQ.tsx":"63","D:\\Code\\swap-interface-v1\\src\\pages\\Pool\\styleds.tsx":"64","D:\\Code\\swap-interface-v1\\src\\pages\\Migration\\SecondCard.tsx":"65","D:\\Code\\swap-interface-v1\\src\\pages\\Migration\\FirstCard.tsx":"66","D:\\Code\\swap-interface-v1\\src\\constants\\lists.ts":"67","D:\\Code\\swap-interface-v1\\src\\state\\toasts\\index.ts":"68","D:\\Code\\swap-interface-v1\\src\\state\\burn\\actions.ts":"69","D:\\Code\\swap-interface-v1\\src\\connectors\\NetworkConnector.ts":"70","D:\\Code\\swap-interface-v1\\src\\pages\\Migration\\config.ts":"71","D:\\Code\\swap-interface-v1\\src\\components\\Loader\\index.tsx":"72","D:\\Code\\swap-interface-v1\\src\\components\\Container.tsx":"73","D:\\Code\\swap-interface-v1\\src\\hooks\\Trades.ts":"74","D:\\Code\\swap-interface-v1\\src\\hooks\\Tokens.ts":"75","D:\\Code\\swap-interface-v1\\src\\state\\actions.ts":"76","D:\\Code\\swap-interface-v1\\src\\state\\swap\\hooks.ts":"77","D:\\Code\\swap-interface-v1\\src\\hooks\\useI18n.ts":"78","D:\\Code\\swap-interface-v1\\src\\data\\Reserves.ts":"79","D:\\Code\\swap-interface-v1\\src\\state\\wallet\\hooks.ts":"80","D:\\Code\\swap-interface-v1\\src\\state\\user\\hooks.tsx":"81","D:\\Code\\swap-interface-v1\\src\\utils\\wrappedCurrency.ts":"82","D:\\Code\\swap-interface-v1\\src\\state\\multicall\\hooks.ts":"83","D:\\Code\\swap-interface-v1\\src\\state\\lists\\hooks.ts":"84","D:\\Code\\swap-interface-v1\\src\\utils\\prices.ts":"85","D:\\Code\\swap-interface-v1\\src\\state\\swap\\actions.ts":"86","D:\\Code\\swap-interface-v1\\src\\hooks\\useENS.ts":"87","D:\\Code\\swap-interface-v1\\src\\hooks\\useParsedQueryString.ts":"88","D:\\Code\\swap-interface-v1\\src\\components\\PositionCard\\index.tsx":"89","D:\\Code\\swap-interface-v1\\src\\state\\mint\\actions.ts":"90","D:\\Code\\swap-interface-v1\\src\\components\\Shared\\index.tsx":"91","D:\\Code\\swap-interface-v1\\src\\state\\user\\actions.ts":"92","D:\\Code\\swap-interface-v1\\src\\components\\FoldableText\\index.tsx":"93","D:\\Code\\swap-interface-v1\\src\\utils\\translateTextHelpers.ts":"94","D:\\Code\\swap-interface-v1\\src\\hooks\\useENSName.ts":"95","D:\\Code\\swap-interface-v1\\src\\hooks\\useENSAddress.ts":"96","D:\\Code\\swap-interface-v1\\src\\utils\\currencyId.ts":"97","D:\\Code\\swap-interface-v1\\src\\data\\TotalSupply.ts":"98","D:\\Code\\swap-interface-v1\\src\\components\\Shared\\Common.tsx":"99","D:\\Code\\swap-interface-v1\\src\\components\\swap\\styleds.tsx":"100","D:\\Code\\swap-interface-v1\\src\\pages\\AppBody.tsx":"101","D:\\Code\\swap-interface-v1\\src\\util\\index.js":"102","D:\\Code\\swap-interface-v1\\src\\hooks\\useAuth.ts":"103","D:\\Code\\swap-interface-v1\\src\\utils\\isZero.ts":"104","D:\\Code\\swap-interface-v1\\src\\components\\NewButton\\index.tsx":"105","D:\\Code\\swap-interface-v1\\src\\components\\DoubleLogo\\index.tsx":"106","D:\\Code\\swap-interface-v1\\src\\components\\CurrencyLogo\\index.tsx":"107","D:\\Code\\swap-interface-v1\\src\\components\\Row\\index.tsx":"108","D:\\Code\\swap-interface-v1\\src\\components\\Card\\index.tsx":"109","D:\\Code\\swap-interface-v1\\src\\components\\Column\\index.tsx":"110","D:\\Code\\swap-interface-v1\\src\\components\\WalletOption\\index.jsx":"111","D:\\Code\\swap-interface-v1\\src\\components\\ConnectWallet\\index.jsx":"112","D:\\Code\\swap-interface-v1\\src\\components\\ConnectButton\\index.jsx":"113","D:\\Code\\swap-interface-v1\\src\\components\\SearchModal\\CurrencySearchModal.tsx":"114","D:\\Code\\swap-interface-v1\\src\\components\\Popups\\PopupItem.tsx":"115","D:\\Code\\swap-interface-v1\\src\\hooks\\useHttpLocations.ts":"116","D:\\Code\\swap-interface-v1\\src\\components\\pancake\\CoinLogo.ts":"117","D:\\Code\\swap-interface-v1\\src\\components\\NavigationTabs\\index.tsx":"118","D:\\Code\\swap-interface-v1\\src\\hooks\\useLast.ts":"119","D:\\Code\\swap-interface-v1\\src\\components\\SearchModal\\ListSelect.tsx":"120","D:\\Code\\swap-interface-v1\\src\\components\\SearchModal\\CurrencySearch.tsx":"121","D:\\Code\\swap-interface-v1\\src\\util\\pool\\Pi.js":"122","D:\\Code\\swap-interface-v1\\src\\util\\pool\\Balance.js":"123","D:\\Code\\swap-interface-v1\\src\\components\\PageHeader\\SettingsModal.tsx":"124","D:\\Code\\swap-interface-v1\\src\\components\\Popups\\TransactionPopup.tsx":"125","D:\\Code\\swap-interface-v1\\src\\components\\Popups\\ListUpdatePopup.tsx":"126","D:\\Code\\swap-interface-v1\\src\\components\\CardNav\\index.tsx":"127","D:\\Code\\swap-interface-v1\\src\\hooks\\useENSContentHash.ts":"128","D:\\Code\\swap-interface-v1\\src\\components\\ConnectWalletButton\\index.tsx":"129","D:\\Code\\swap-interface-v1\\src\\utils\\uriToHttp.ts":"130","D:\\Code\\swap-interface-v1\\src\\utils\\parseENSAddress.ts":"131","D:\\Code\\swap-interface-v1\\src\\utils\\contenthashToUri.ts":"132","D:\\Code\\swap-interface-v1\\src\\components\\Logo\\index.tsx":"133","D:\\Code\\swap-interface-v1\\src\\utils\\listVersionLabel.ts":"134","D:\\Code\\swap-interface-v1\\src\\components\\SearchModal\\sorting.ts":"135","D:\\Code\\swap-interface-v1\\src\\hooks\\useToggle.ts":"136","D:\\Code\\swap-interface-v1\\src\\components\\Modal\\index.tsx":"137","D:\\Code\\swap-interface-v1\\src\\components\\QuestionHelper\\index.tsx":"138","D:\\Code\\swap-interface-v1\\src\\components\\V2ExchangeRedirectModal\\index.tsx":"139","D:\\Code\\swap-interface-v1\\src\\components\\SearchModal\\styleds.tsx":"140","D:\\Code\\swap-interface-v1\\src\\hooks\\useOnClickOutside.tsx":"141","D:\\Code\\swap-interface-v1\\src\\components\\PageHeader\\TransactionDeadlineSetting.tsx":"142","D:\\Code\\swap-interface-v1\\src\\components\\SearchModal\\filtering.ts":"143","D:\\Code\\swap-interface-v1\\src\\components\\PageHeader\\SlippageToleranceSetting.tsx":"144","D:\\Code\\swap-interface-v1\\src\\components\\SearchModal\\SortButton.tsx":"145","D:\\Code\\swap-interface-v1\\src\\components\\SearchModal\\CurrencyList.tsx":"146","D:\\Code\\swap-interface-v1\\src\\components\\SearchModal\\CommonBases.tsx":"147","D:\\Code\\swap-interface-v1\\src\\components\\ListLogo\\index.tsx":"148","D:\\Code\\swap-interface-v1\\src\\components\\Tooltip\\index.tsx":"149","D:\\Code\\swap-interface-v1\\src\\components\\Popover\\index.tsx":"150","D:\\Code\\swap-interface-v1\\src\\state\\burn\\hooks.ts":"151","D:\\Code\\swap-interface-v1\\src\\hooks\\useApproveCallback.ts":"152","D:\\Code\\swap-interface-v1\\src\\utils\\useDebouncedChangeHandler.ts":"153","D:\\Code\\swap-interface-v1\\src\\state\\transactions\\hooks.tsx":"154","D:\\Code\\swap-interface-v1\\src\\pages\\AddLiquidity\\PoolPriceBar.tsx":"155","D:\\Code\\swap-interface-v1\\src\\utils\\maxAmountSpend.ts":"156","D:\\Code\\swap-interface-v1\\src\\hooks\\useWrapCallback.ts":"157","D:\\Code\\swap-interface-v1\\src\\hooks\\useSwapCallback.ts":"158","D:\\Code\\swap-interface-v1\\src\\components\\swap\\confirmPriceImpactWithoutFee.ts":"159","D:\\Code\\swap-interface-v1\\src\\data\\Allowances.ts":"160","D:\\Code\\swap-interface-v1\\src\\components\\swap\\AdvancedSwapDetailsDropdown.tsx":"161","D:\\Code\\swap-interface-v1\\src\\components\\swap\\ConfirmSwapModal.tsx":"162","D:\\Code\\swap-interface-v1\\src\\components\\Slider\\index.tsx":"163","D:\\Code\\swap-interface-v1\\src\\components\\CurrencyInputPanel\\index.tsx":"164","D:\\Code\\swap-interface-v1\\src\\components\\TransactionConfirmationModal\\index.tsx":"165","D:\\Code\\swap-interface-v1\\src\\components\\ProgressSteps\\index.tsx":"166","D:\\Code\\swap-interface-v1\\src\\components\\SafeMoonWarningModal\\index.tsx":"167","D:\\Code\\swap-interface-v1\\src\\components\\SyrupWarningModal\\index.tsx":"168","D:\\Code\\swap-interface-v1\\src\\components\\TokenWarningModal\\index.tsx":"169","D:\\Code\\swap-interface-v1\\src\\components\\AddressInputPanel\\index.tsx":"170","D:\\Code\\swap-interface-v1\\src\\components\\swap\\AdvancedSwapDetails.tsx":"171","D:\\Code\\swap-interface-v1\\src\\components\\swap\\SwapModalHeader.tsx":"172","D:\\Code\\swap-interface-v1\\src\\components\\TransactionConfirmationModal\\TransactionSubmittedContent.tsx":"173","D:\\Code\\swap-interface-v1\\src\\components\\TransactionConfirmationModal\\ConfirmationPendingContent.tsx":"174","D:\\Code\\swap-interface-v1\\src\\components\\TransactionConfirmationModal\\TransactionErrorContent.tsx":"175","D:\\Code\\swap-interface-v1\\src\\components\\TransactionConfirmationModal\\ConfirmationModalContent.tsx":"176","D:\\Code\\swap-interface-v1\\src\\components\\TransactionConfirmationModal\\TransactionConfirmationModal.tsx":"177","D:\\Code\\swap-interface-v1\\src\\components\\swap\\SwapModalFooter.tsx":"178","D:\\Code\\swap-interface-v1\\src\\components\\swap\\SwapRoute.tsx":"179","D:\\Code\\swap-interface-v1\\src\\components\\swap\\FormattedPriceImpact.tsx":"180","D:\\Code\\swap-interface-v1\\src\\components\\NumericalInput\\index.tsx":"181","D:\\Code\\swap-interface-v1\\src\\components\\TransactionConfirmationModal\\helpers.tsx":"182","D:\\Code\\swap-interface-v1\\src\\pages\\AddLiquidity\\ConfirmAddModalBottom.tsx":"183","D:\\Code\\swap-interface-v1\\src\\state\\mint\\hooks.ts":"184","D:\\Code\\swap-interface-v1\\src\\components\\Pane\\index.tsx":"185","D:\\Code\\swap-interface-v1\\src\\pages\\Index\\index.tsx":"186","D:\\Code\\swap-interface-v1\\src\\pages\\Index\\components\\banner.tsx":"187","D:\\Code\\swap-interface-v1\\src\\pages\\Index\\components\\stake.tsx":"188","D:\\Code\\swap-interface-v1\\src\\constants\\home.ts":"189"},{"size":1157,"mtime":1681118082271,"results":"190","hashOfConfig":"191"},{"size":532,"mtime":1681118082271,"results":"192","hashOfConfig":"191"},{"size":376,"mtime":1681118082281,"results":"193","hashOfConfig":"191"},{"size":3712,"mtime":1681118082277,"results":"194","hashOfConfig":"191"},{"size":1952,"mtime":1681118082275,"results":"195","hashOfConfig":"191"},{"size":885,"mtime":1681118082251,"results":"196","hashOfConfig":"191"},{"size":6145,"mtime":1681198702365,"results":"197","hashOfConfig":"191"},{"size":3134,"mtime":1681118082280,"results":"198","hashOfConfig":"191"},{"size":7843,"mtime":1681118082278,"results":"199","hashOfConfig":"191"},{"size":1000,"mtime":1681118082276,"results":"200","hashOfConfig":"191"},{"size":871,"mtime":1681118082275,"results":"201","hashOfConfig":"191"},{"size":1956,"mtime":1681118082270,"results":"202","hashOfConfig":"191"},{"size":669,"mtime":1681118082270,"results":"203","hashOfConfig":"191"},{"size":814,"mtime":1681118082270,"results":"204","hashOfConfig":"191"},{"size":733,"mtime":1681118082269,"results":"205","hashOfConfig":"191"},{"size":747,"mtime":1681118082268,"results":"206","hashOfConfig":"191"},{"size":435,"mtime":1681118082268,"results":"207","hashOfConfig":"191"},{"size":608,"mtime":1681118082270,"results":"208","hashOfConfig":"191"},{"size":228,"mtime":1681118082307,"results":"209","hashOfConfig":"191"},{"size":958,"mtime":1681118082279,"results":"210","hashOfConfig":"191"},{"size":2802,"mtime":1681118082269,"results":"211","hashOfConfig":"191"},{"size":534,"mtime":1681118082306,"results":"212","hashOfConfig":"191"},{"size":1932,"mtime":1681118082275,"results":"213","hashOfConfig":"191"},{"size":1739,"mtime":1681118082278,"results":"214","hashOfConfig":"191"},{"size":1929,"mtime":1681118082308,"results":"215","hashOfConfig":"191"},{"size":518,"mtime":1681118082262,"results":"216","hashOfConfig":"191"},{"size":1062,"mtime":1681118082251,"results":"217","hashOfConfig":"191"},{"size":1943,"mtime":1681118082267,"results":"218","hashOfConfig":"191"},{"size":954,"mtime":1681118082272,"results":"219","hashOfConfig":"191"},{"size":331,"mtime":1681118082274,"results":"220","hashOfConfig":"191"},{"size":581,"mtime":1681118082274,"results":"221","hashOfConfig":"191"},{"size":1395,"mtime":1681118082276,"results":"222","hashOfConfig":"191"},{"size":3602,"mtime":1681283269336,"results":"223","hashOfConfig":"191"},{"size":3928,"mtime":1681282066611,"results":"224","hashOfConfig":"191"},{"size":1761,"mtime":1681118082308,"results":"225","hashOfConfig":"191"},{"size":2807,"mtime":1681118082307,"results":"226","hashOfConfig":"191"},{"size":267,"mtime":1681118082266,"results":"227","hashOfConfig":"191"},{"size":18253,"mtime":1681118082272,"results":"228","hashOfConfig":"191"},{"size":28464,"mtime":1681118082274,"results":"229","hashOfConfig":"191"},{"size":24967,"mtime":1681118082274,"results":"230","hashOfConfig":"191"},{"size":1853,"mtime":1681118082258,"results":"231","hashOfConfig":"191"},{"size":2377,"mtime":1681118082264,"results":"232","hashOfConfig":"191"},{"size":6737,"mtime":1681118082274,"results":"233","hashOfConfig":"191"},{"size":7060,"mtime":1681118082274,"results":"234","hashOfConfig":"191"},{"size":2682,"mtime":1681118082273,"results":"235","hashOfConfig":"191"},{"size":4651,"mtime":1681277388688,"results":"236","hashOfConfig":"191"},{"size":1308,"mtime":1681118082253,"results":"237","hashOfConfig":"191"},{"size":1774,"mtime":1681118082275,"results":"238","hashOfConfig":"191"},{"size":1965,"mtime":1681118082280,"results":"239","hashOfConfig":"191"},{"size":5491,"mtime":1681118082277,"results":"240","hashOfConfig":"191"},{"size":479,"mtime":1681118082308,"results":"241","hashOfConfig":"191"},{"size":4051,"mtime":1681118082278,"results":"242","hashOfConfig":"191"},{"size":2541,"mtime":1681118082279,"results":"243","hashOfConfig":"191"},{"size":294,"mtime":1681118082276,"results":"244","hashOfConfig":"191"},{"size":4932,"mtime":1681118082281,"results":"245","hashOfConfig":"191"},{"size":1319,"mtime":1681118082277,"results":"246","hashOfConfig":"191"},{"size":547,"mtime":1681118082276,"results":"247","hashOfConfig":"191"},{"size":3919,"mtime":1681118082307,"results":"248","hashOfConfig":"191"},{"size":1996,"mtime":1681118082265,"results":"249","hashOfConfig":"191"},{"size":738,"mtime":1681118082309,"results":"250","hashOfConfig":"191"},{"size":356,"mtime":1681118082267,"results":"251","hashOfConfig":"191"},{"size":1314,"mtime":1681118082271,"results":"252","hashOfConfig":"191"},{"size":1645,"mtime":1681118082273,"results":"253","hashOfConfig":"191"},{"size":625,"mtime":1681118082274,"results":"254","hashOfConfig":"191"},{"size":3972,"mtime":1681118082273,"results":"255","hashOfConfig":"191"},{"size":4139,"mtime":1681118082273,"results":"256","hashOfConfig":"191"},{"size":128,"mtime":1681118082267,"results":"257","hashOfConfig":"191"},{"size":1197,"mtime":1681118082279,"results":"258","hashOfConfig":"191"},{"size":307,"mtime":1681118082276,"results":"259","hashOfConfig":"191"},{"size":5835,"mtime":1681118082265,"results":"260","hashOfConfig":"191"},{"size":3132,"mtime":1681118082273,"results":"261","hashOfConfig":"191"},{"size":1132,"mtime":1681118082255,"results":"262","hashOfConfig":"191"},{"size":901,"mtime":1681118082254,"results":"263","hashOfConfig":"191"},{"size":4481,"mtime":1681118082268,"results":"264","hashOfConfig":"191"},{"size":4105,"mtime":1681118082268,"results":"265","hashOfConfig":"191"},{"size":46,"mtime":1681118082275,"results":"266","hashOfConfig":"191"},{"size":9983,"mtime":1681118082279,"results":"267","hashOfConfig":"191"},{"size":873,"mtime":1681118082270,"results":"268","hashOfConfig":"191"},{"size":2131,"mtime":1681118082268,"results":"269","hashOfConfig":"191"},{"size":4828,"mtime":1681118082281,"results":"270","hashOfConfig":"191"},{"size":8537,"mtime":1681118082280,"results":"271","hashOfConfig":"191"},{"size":862,"mtime":1681118082309,"results":"272","hashOfConfig":"191"},{"size":8126,"mtime":1681118082278,"results":"273","hashOfConfig":"191"},{"size":3765,"mtime":1681118082276,"results":"274","hashOfConfig":"191"},{"size":3277,"mtime":1681118082308,"results":"275","hashOfConfig":"191"},{"size":688,"mtime":1681118082279,"results":"276","hashOfConfig":"191"},{"size":786,"mtime":1681118082269,"results":"277","hashOfConfig":"191"},{"size":370,"mtime":1681118082271,"results":"278","hashOfConfig":"191"},{"size":8963,"mtime":1681118082259,"results":"279","hashOfConfig":"191"},{"size":330,"mtime":1681118082277,"results":"280","hashOfConfig":"191"},{"size":26,"mtime":1681118082261,"results":"281","hashOfConfig":"191"},{"size":1459,"mtime":1681118082280,"results":"282","hashOfConfig":"191"},{"size":1658,"mtime":1681118082255,"results":"283","hashOfConfig":"191"},{"size":1446,"mtime":1681118082308,"results":"284","hashOfConfig":"191"},{"size":1633,"mtime":1681118082269,"results":"285","hashOfConfig":"191"},{"size":1429,"mtime":1681118082269,"results":"286","hashOfConfig":"191"},{"size":353,"mtime":1681118082307,"results":"287","hashOfConfig":"191"},{"size":716,"mtime":1681118082268,"results":"288","hashOfConfig":"191"},{"size":2393,"mtime":1681118082261,"results":"289","hashOfConfig":"191"},{"size":3371,"mtime":1681118082265,"results":"290","hashOfConfig":"191"},{"size":564,"mtime":1681118082273,"results":"291","hashOfConfig":"191"},{"size":1983,"mtime":1681118082296,"results":"292","hashOfConfig":"191"},{"size":2127,"mtime":1681118082269,"results":"293","hashOfConfig":"191"},{"size":192,"mtime":1681118082307,"results":"294","hashOfConfig":"191"},{"size":539,"mtime":1681118082256,"results":"295","hashOfConfig":"191"},{"size":1143,"mtime":1681118082255,"results":"296","hashOfConfig":"191"},{"size":2012,"mtime":1681118082255,"results":"297","hashOfConfig":"191"},{"size":1037,"mtime":1681118082259,"results":"298","hashOfConfig":"191"},{"size":585,"mtime":1681118082253,"results":"299","hashOfConfig":"191"},{"size":670,"mtime":1681118082253,"results":"300","hashOfConfig":"191"},{"size":3522,"mtime":1681118082264,"results":"301","hashOfConfig":"191"},{"size":784,"mtime":1681118082254,"results":"302","hashOfConfig":"191"},{"size":758,"mtime":1681118082254,"results":"303","hashOfConfig":"191"},{"size":2434,"mtime":1681118082260,"results":"304","hashOfConfig":"191"},{"size":2622,"mtime":1681118082258,"results":"305","hashOfConfig":"191"},{"size":734,"mtime":1681118082270,"results":"306","hashOfConfig":"191"},{"size":291,"mtime":1681118082264,"results":"307","hashOfConfig":"191"},{"size":2198,"mtime":1681118082256,"results":"308","hashOfConfig":"191"},{"size":1057,"mtime":1681118082270,"results":"309","hashOfConfig":"191"},{"size":11131,"mtime":1681118082260,"results":"310","hashOfConfig":"191"},{"size":7961,"mtime":1681118082260,"results":"311","hashOfConfig":"191"},{"size":4634,"mtime":1681118082296,"results":"312","hashOfConfig":"191"},{"size":925,"mtime":1681118082296,"results":"313","hashOfConfig":"191"},{"size":910,"mtime":1681118082257,"results":"314","hashOfConfig":"191"},{"size":1268,"mtime":1681118082258,"results":"315","hashOfConfig":"191"},{"size":3649,"mtime":1681118082258,"results":"316","hashOfConfig":"191"},{"size":1101,"mtime":1681118082253,"results":"317","hashOfConfig":"191"},{"size":1277,"mtime":1681118082269,"results":"318","hashOfConfig":"191"},{"size":874,"mtime":1681118082254,"results":"319","hashOfConfig":"191"},{"size":796,"mtime":1681118082309,"results":"320","hashOfConfig":"191"},{"size":369,"mtime":1681118082308,"results":"321","hashOfConfig":"191"},{"size":1461,"mtime":1681118082307,"results":"322","hashOfConfig":"191"},{"size":817,"mtime":1681118082255,"results":"323","hashOfConfig":"191"},{"size":187,"mtime":1681118082307,"results":"324","hashOfConfig":"191"},{"size":1727,"mtime":1681118082261,"results":"325","hashOfConfig":"191"},{"size":279,"mtime":1681118082271,"results":"326","hashOfConfig":"191"},{"size":3320,"mtime":1681118082256,"results":"327","hashOfConfig":"191"},{"size":1113,"mtime":1681118082259,"results":"328","hashOfConfig":"191"},{"size":2593,"mtime":1681118082263,"results":"329","hashOfConfig":"191"},{"size":1775,"mtime":1681118082261,"results":"330","hashOfConfig":"191"},{"size":769,"mtime":1681118082271,"results":"331","hashOfConfig":"191"},{"size":2108,"mtime":1681118082257,"results":"332","hashOfConfig":"191"},{"size":1006,"mtime":1681118082261,"results":"333","hashOfConfig":"191"},{"size":4006,"mtime":1681118082257,"results":"334","hashOfConfig":"191"},{"size":752,"mtime":1681118082260,"results":"335","hashOfConfig":"191"},{"size":6462,"mtime":1681118082260,"results":"336","hashOfConfig":"191"},{"size":2405,"mtime":1681118082260,"results":"337","hashOfConfig":"191"},{"size":600,"mtime":1681118082255,"results":"338","hashOfConfig":"191"},{"size":933,"mtime":1681118082262,"results":"339","hashOfConfig":"191"},{"size":3220,"mtime":1681118082258,"results":"340","hashOfConfig":"191"},{"size":5434,"mtime":1681118082276,"results":"341","hashOfConfig":"191"},{"size":4084,"mtime":1681118082269,"results":"342","hashOfConfig":"191"},{"size":1183,"mtime":1681118082309,"results":"343","hashOfConfig":"191"},{"size":2878,"mtime":1681118082280,"results":"344","hashOfConfig":"191"},{"size":1711,"mtime":1681118082272,"results":"345","hashOfConfig":"191"},{"size":662,"mtime":1681118082307,"results":"346","hashOfConfig":"191"},{"size":3206,"mtime":1681118082271,"results":"347","hashOfConfig":"191"},{"size":8989,"mtime":1681118082271,"results":"348","hashOfConfig":"191"},{"size":1013,"mtime":1681118082265,"results":"349","hashOfConfig":"191"},{"size":711,"mtime":1681118082268,"results":"350","hashOfConfig":"191"},{"size":1119,"mtime":1681118082265,"results":"351","hashOfConfig":"191"},{"size":3323,"mtime":1681118082265,"results":"352","hashOfConfig":"191"},{"size":3335,"mtime":1681118082261,"results":"353","hashOfConfig":"191"},{"size":6713,"mtime":1681118082254,"results":"354","hashOfConfig":"191"},{"size":460,"mtime":1681118082263,"results":"355","hashOfConfig":"191"},{"size":2530,"mtime":1681118082259,"results":"356","hashOfConfig":"191"},{"size":2706,"mtime":1681118082259,"results":"357","hashOfConfig":"191"},{"size":2814,"mtime":1681118082261,"results":"358","hashOfConfig":"191"},{"size":5526,"mtime":1681118082262,"results":"359","hashOfConfig":"191"},{"size":3927,"mtime":1681118082252,"results":"360","hashOfConfig":"191"},{"size":4204,"mtime":1681118082264,"results":"361","hashOfConfig":"191"},{"size":4881,"mtime":1681118082265,"results":"362","hashOfConfig":"191"},{"size":1439,"mtime":1681118082263,"results":"363","hashOfConfig":"191"},{"size":1289,"mtime":1681118082262,"results":"364","hashOfConfig":"191"},{"size":1273,"mtime":1681118082262,"results":"365","hashOfConfig":"191"},{"size":679,"mtime":1681118082262,"results":"366","hashOfConfig":"191"},{"size":1121,"mtime":1681118082262,"results":"367","hashOfConfig":"191"},{"size":4816,"mtime":1681118082265,"results":"368","hashOfConfig":"191"},{"size":1304,"mtime":1681118082265,"results":"369","hashOfConfig":"191"},{"size":586,"mtime":1681118082265,"results":"370","hashOfConfig":"191"},{"size":2218,"mtime":1681118082256,"results":"371","hashOfConfig":"191"},{"size":1200,"mtime":1681118082263,"results":"372","hashOfConfig":"191"},{"size":2381,"mtime":1681118082272,"results":"373","hashOfConfig":"191"},{"size":7319,"mtime":1681118082277,"results":"374","hashOfConfig":"191"},{"size":201,"mtime":1681118082258,"results":"375","hashOfConfig":"191"},{"size":391,"mtime":1681278525510,"results":"376","hashOfConfig":"191"},{"size":547,"mtime":1681278270230,"results":"377","hashOfConfig":"191"},{"size":1822,"mtime":1681283302546,"results":"378","hashOfConfig":"191"},{"size":13671,"mtime":1681282028967,"results":"379","hashOfConfig":"191"},{"filePath":"380","messages":"381","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},"zng6q8",{"filePath":"383","messages":"384","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"385","messages":"386","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"387","messages":"388","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"389","messages":"390","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"391","messages":"392","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"393","messages":"394","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"395","usedDeprecatedRules":"382"},{"filePath":"396","messages":"397","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"398","messages":"399","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"400","messages":"401","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"402","messages":"403","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"404","messages":"405","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"406","messages":"407","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"408","messages":"409","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"410","messages":"411","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"412","messages":"413","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"414","messages":"415","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"416","messages":"417","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"418","messages":"419","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"420","messages":"421","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"422","messages":"423","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"424","messages":"425","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"426","messages":"427","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"428","messages":"429","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"430","messages":"431","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"432","messages":"433","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"434","messages":"435","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"436","messages":"437","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"438","messages":"439","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"440","messages":"441","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"442","messages":"443","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"444","messages":"445","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"446","messages":"447","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"448","messages":"449","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"450","messages":"451","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"452","messages":"453","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"454","messages":"455","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"456","messages":"457","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"458","usedDeprecatedRules":"382"},{"filePath":"459","messages":"460","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"461","usedDeprecatedRules":"382"},{"filePath":"462","messages":"463","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"464","usedDeprecatedRules":"382"},{"filePath":"465","messages":"466","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"467","messages":"468","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"469","messages":"470","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"471","usedDeprecatedRules":"382"},{"filePath":"472","messages":"473","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"474","messages":"475","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"476","messages":"477","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"478","usedDeprecatedRules":"479"},{"filePath":"480","messages":"481","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"482","usedDeprecatedRules":"479"},{"filePath":"483","messages":"484","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"485","messages":"486","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"487","messages":"488","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"489","messages":"490","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"491","messages":"492","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"493","messages":"494","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"495","messages":"496","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"497","messages":"498","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"499","messages":"500","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"501","messages":"502","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"503","messages":"504","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"505","messages":"506","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"507","messages":"508","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"509","messages":"510","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"511","messages":"512","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"513","messages":"514","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"515","messages":"516","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"517","messages":"518","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"519","messages":"520","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"521","messages":"522","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"523","messages":"524","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"525","messages":"526","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"527","messages":"528","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"529","messages":"530","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"531","messages":"532","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"533","messages":"534","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"535","messages":"536","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"537","messages":"538","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"539","messages":"540","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"541","messages":"542","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"543","messages":"544","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"545","messages":"546","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"547","messages":"548","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"549","messages":"550","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"551","messages":"552","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"553","messages":"554","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"555","messages":"556","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"557","messages":"558","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"559","messages":"560","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"561","messages":"562","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"563","messages":"564","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"565","messages":"566","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"567","messages":"568","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"569","messages":"570","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"571","messages":"572","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"573","messages":"574","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"575","messages":"576","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"577","messages":"578","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"579","messages":"580","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"581","messages":"582","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"583","messages":"584","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"585","messages":"586","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"587","messages":"588","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"589","messages":"590","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"591","messages":"592","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"479"},{"filePath":"593","messages":"594","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"595","messages":"596","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"597","messages":"598","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"599","messages":"600","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"601","messages":"602","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"603","messages":"604","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"605","messages":"606","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"607","messages":"608","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"609","messages":"610","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"611","usedDeprecatedRules":"479"},{"filePath":"612","messages":"613","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"479"},{"filePath":"614","messages":"615","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"479"},{"filePath":"616","messages":"617","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"618","messages":"619","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"620","messages":"621","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"622","messages":"623","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"624","messages":"625","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"626","messages":"627","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"628","messages":"629","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"630","messages":"631","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"632","messages":"633","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"634","usedDeprecatedRules":"479"},{"filePath":"635","messages":"636","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"479"},{"filePath":"637","messages":"638","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"639","usedDeprecatedRules":"382"},{"filePath":"640","messages":"641","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"642","messages":"643","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"644","messages":"645","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"646","messages":"647","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"648","messages":"649","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"650","messages":"651","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"652","messages":"653","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"654","messages":"655","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"656","messages":"657","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"658","messages":"659","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"660","messages":"661","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"662","messages":"663","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"664","messages":"665","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"666","messages":"667","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"668","messages":"669","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"670","messages":"671","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"672","messages":"673","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"674","messages":"675","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"676","messages":"677","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"678","messages":"679","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"680","messages":"681","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"682","messages":"683","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"684","messages":"685","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"686","messages":"687","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"688","messages":"689","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"690","messages":"691","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"692","messages":"693","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"694","messages":"695","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"696","messages":"697","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"698","messages":"699","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"700","messages":"701","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"702","messages":"703","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"704","messages":"705","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"706","messages":"707","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"708","messages":"709","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"710","messages":"711","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"712","messages":"713","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"714","messages":"715","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"716","messages":"717","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"718","messages":"719","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"720","messages":"721","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"722","messages":"723","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"724","messages":"725","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"726","messages":"727","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"728","messages":"729","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"730","messages":"731","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"732","messages":"733","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"734","messages":"735","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"736","messages":"737","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"738","usedDeprecatedRules":"382"},{"filePath":"739","messages":"740","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"741","messages":"742","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"743","messages":"744","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"745","messages":"746","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"747","messages":"748","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"749","usedDeprecatedRules":"382"},{"filePath":"750","messages":"751","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"752","messages":"753","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"754","messages":"755","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"756","messages":"757","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"758","messages":"759","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"760","usedDeprecatedRules":"382"},{"filePath":"761","messages":"762","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"763","messages":"764","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"765","messages":"766","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"767","messages":"768","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},{"filePath":"769","messages":"770","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"771","messages":"772","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"382"},"D:\\Code\\swap-interface-v1\\src\\index.tsx",[],["773","774","775","776","777"],"D:\\Code\\swap-interface-v1\\src\\i18n.ts",[],"D:\\Code\\swap-interface-v1\\src\\style\\Global.ts",[],"D:\\Code\\swap-interface-v1\\src\\state\\lists\\updater.ts",[],"D:\\Code\\swap-interface-v1\\src\\state\\application\\updater.ts",[],"D:\\Code\\swap-interface-v1\\src\\Providers.tsx",[],"D:\\Code\\swap-interface-v1\\src\\pages\\App.tsx",["778","779","780","781","782"],"import React, { Suspense, useEffect, useState } from 'react'\r\nimport { HashRouter, Route, Switch } from 'react-router-dom'\r\nimport styled from 'styled-components'\r\nimport { Credentials, StringTranslations } from '@crowdin/crowdin-api-client'\r\nimport { LangType, useModal } from '@pancakeswap-libs/uikit'\r\nimport VersionBar from 'components/VersionBar'\r\nimport Popups from '../components/Popups'\r\nimport Web3ReactManager from '../components/Web3ReactManager'\r\nimport { RedirectDuplicateTokenIds, RedirectOldAddLiquidityPathStructure } from './AddLiquidity/redirects'\r\nimport { RedirectOldRemoveLiquidityPathStructure } from './RemoveLiquidity/redirects'\r\nimport AddLiquidity from './AddLiquidity'\r\nimport Pool from './Pool'\r\nimport PoolFinder from './PoolFinder'\r\nimport RemoveLiquidity from './RemoveLiquidity'\r\nimport Swap from './Swap'\r\nimport IndexView from './Index/index'\r\nimport Migration from './Migration'\r\nimport { RedirectPathToSwapOnly } from './Swap/redirects'\r\nimport { EN, allLanguages } from '../constants/localisation/languageCodes'\r\nimport { LanguageContext } from '../hooks/LanguageContext'\r\nimport { TranslationsContext } from '../hooks/TranslationsContext'\r\nimport UseV2ExchangeModal from '../components/UseV2ExchangeModal'\r\nimport AppHeader from '../components/AppHeader'\r\nimport AppFooter from '../components/AppFooter'\r\n\r\nimport Menu from '../components/Menu'\r\nimport useGetDocumentTitlePrice from '../hooks/useGetDocumentTitlePrice'\r\n\r\nconst AppWrapper = styled.div`\r\n  display: flex;\r\n  flex-flow: column;\r\n  align-items: flex-start;\r\n  overflow-x: hidden;\r\n  background: #FEFAFC;\r\n`\r\n\r\nconst BodyWrapper = styled.div`\r\n  overflow-y: auto;\r\n  overflow-x: hidden;\r\n  z-index: 1;\r\n  margin: 0 auto;\r\n  width: 100%;\r\n`\r\n\r\nconst CACHE_KEY = 'pancakeSwapLanguage'\r\n\r\nexport default function App() {\r\n  const [selectedLanguage, setSelectedLanguage] = useState<any>(undefined)\r\n  const [translatedLanguage, setTranslatedLanguage] = useState<any>(undefined)\r\n  const [translations, setTranslations] = useState<Array<any>>([])\r\n  const apiKey = `${process.env.REACT_APP_CROWDIN_APIKEY}`\r\n  const projectId = parseInt(`${process.env.REACT_APP_CROWDIN_PROJECTID}`)\r\n  const fileId = 6\r\n  const credentials: Credentials = {\r\n    token: apiKey,\r\n  }\r\n\r\n  const stringTranslationsApi = new StringTranslations(credentials)\r\n\r\n  const [hasSeenModal, setHasSeenModal] = useState(false)\r\n  // const [onPresentUseV2ExchangeModal] = useModal(<UseV2ExchangeModal />)\r\n\r\n  useEffect(() => {\r\n    const showModal = () => {\r\n      // onPresentUseV2ExchangeModal()\r\n      setHasSeenModal(true)\r\n    }\r\n    if (!hasSeenModal) {\r\n      showModal()\r\n    }\r\n  }, [hasSeenModal])\r\n\r\n  const getStoredLang = (storedLangCode: string) => {\r\n    return allLanguages.filter((language) => {\r\n      return language.code === storedLangCode\r\n    })[0]\r\n  }\r\n\r\n  useEffect(() => {\r\n    const storedLangCode = localStorage.getItem(CACHE_KEY)\r\n    if (storedLangCode) {\r\n      const storedLang = getStoredLang(storedLangCode)\r\n      setSelectedLanguage(storedLang)\r\n    } else {\r\n      setSelectedLanguage(EN)\r\n    }\r\n  }, [])\r\n\r\n  const fetchTranslationsForSelectedLanguage = async () => {\r\n    stringTranslationsApi\r\n      .listLanguageTranslations(projectId, selectedLanguage.code, undefined, fileId, 200)\r\n      .then((translationApiResponse) => {\r\n        if (translationApiResponse.data.length < 1) {\r\n          setTranslations(['error'])\r\n        } else {\r\n          setTranslations(translationApiResponse.data)\r\n        }\r\n      })\r\n      .then(() => setTranslatedLanguage(selectedLanguage))\r\n      .catch((error) => {\r\n        setTranslations(['error'])\r\n        console.error(error)\r\n      })\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (selectedLanguage) {\r\n      // fetchTranslationsForSelectedLanguage()\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [selectedLanguage])\r\n\r\n  const handleLanguageSelect = (langObject: LangType) => {\r\n    setSelectedLanguage(langObject)\r\n    localStorage.setItem(CACHE_KEY, langObject.code)\r\n  }\r\n\r\n  useGetDocumentTitlePrice()\r\n\r\n  return (\r\n    <Suspense fallback={null}>\r\n      <HashRouter>\r\n        <AppWrapper>\r\n          <LanguageContext.Provider\r\n            value={{\r\n              selectedLanguage,\r\n              setSelectedLanguage: handleLanguageSelect,\r\n              translatedLanguage,\r\n              setTranslatedLanguage,\r\n            }}\r\n          >\r\n            <TranslationsContext.Provider value={{ translations, setTranslations }}>\r\n              {/* <Menu> */}\r\n                <BodyWrapper>\r\n                  <Popups />\r\n                  <AppHeader />\r\n                  <Web3ReactManager>\r\n                    <Switch>\r\n                      <Route exact strict path=\"/\" component={IndexView} />\r\n                      <Route exact strict path=\"/swap\" component={Swap} />\r\n                      <Route exact strict path=\"/find\" component={PoolFinder} />\r\n                      <Route exact strict path=\"/pool\" component={Pool} />\r\n                      <Route exact path=\"/add\" component={AddLiquidity} />\r\n                      <Route exact path=\"/migrate\" component={Migration} />\r\n                      <Route exact strict path=\"/remove/:currencyIdA/:currencyIdB\" component={RemoveLiquidity} />\r\n\r\n                      {/* Redirection: These old routes are still used in the code base */}\r\n                      <Route exact path=\"/add/:currencyIdA\" component={RedirectOldAddLiquidityPathStructure} />\r\n                      <Route exact path=\"/add/:currencyIdA/:currencyIdB\" component={RedirectDuplicateTokenIds} />\r\n                      <Route exact strict path=\"/remove/:tokens\" component={RedirectOldRemoveLiquidityPathStructure} />\r\n\r\n                      <Route component={RedirectPathToSwapOnly} />\r\n                    </Switch>\r\n                  </Web3ReactManager>\r\n                  <AppFooter />\r\n                </BodyWrapper>\r\n              {/* </Menu> */}\r\n              {/* <VersionBar /> */}\r\n            </TranslationsContext.Provider>\r\n          </LanguageContext.Provider>\r\n        </AppWrapper>\r\n      </HashRouter>\r\n    </Suspense>\r\n  )\r\n}\r\n","D:\\Code\\swap-interface-v1\\src\\state\\transactions\\updater.tsx",[],"D:\\Code\\swap-interface-v1\\src\\state\\multicall\\updater.tsx",[],"D:\\Code\\swap-interface-v1\\src\\state\\lists\\actions.ts",[],"D:\\Code\\swap-interface-v1\\src\\state\\application\\actions.ts",[],"D:\\Code\\swap-interface-v1\\src\\hooks\\useFetchListCallback.ts",[],"D:\\Code\\swap-interface-v1\\src\\hooks\\useInterval.ts",[],"D:\\Code\\swap-interface-v1\\src\\hooks\\useIsWindowVisible.ts",[],"D:\\Code\\swap-interface-v1\\src\\hooks\\useDebounce.ts",[],"D:\\Code\\swap-interface-v1\\src\\hooks\\LanguageContext.ts",[],"D:\\Code\\swap-interface-v1\\src\\hooks\\TranslationsContext.ts",[],"D:\\Code\\swap-interface-v1\\src\\hooks\\useGetDocumentTitlePrice.ts",[],"D:\\Code\\swap-interface-v1\\src\\utils\\getLibrary.ts",[],"D:\\Code\\swap-interface-v1\\src\\state\\transactions\\actions.ts",[],"D:\\Code\\swap-interface-v1\\src\\hooks\\useContract.ts",[],"D:\\Code\\swap-interface-v1\\src\\utils\\chunkArray.ts",[],"D:\\Code\\swap-interface-v1\\src\\state\\application\\hooks.ts",[],"D:\\Code\\swap-interface-v1\\src\\state\\multicall\\actions.ts",[],"D:\\Code\\swap-interface-v1\\src\\utils\\retry.ts",[],"D:\\Code\\swap-interface-v1\\src\\components\\ToastListener\\index.tsx",[],"D:\\Code\\swap-interface-v1\\src\\ThemeContext.tsx",[],"D:\\Code\\swap-interface-v1\\src\\constants\\localisation\\languageCodes.ts",[],"D:\\Code\\swap-interface-v1\\src\\pages\\AddLiquidity\\redirects.tsx",[],"D:\\Code\\swap-interface-v1\\src\\pages\\Swap\\redirects.tsx",[],"D:\\Code\\swap-interface-v1\\src\\pages\\RemoveLiquidity\\redirects.tsx",[],"D:\\Code\\swap-interface-v1\\src\\state\\index.ts",[],"D:\\Code\\swap-interface-v1\\src\\hooks\\index.ts",[],"D:\\Code\\swap-interface-v1\\src\\constants\\index.ts",[],"D:\\Code\\swap-interface-v1\\src\\utils\\resolveENSContentHash.ts",[],"D:\\Code\\swap-interface-v1\\src\\utils\\getTokenList.ts",[],"D:\\Code\\swap-interface-v1\\src\\constants\\abis\\erc20.ts",[],"D:\\Code\\swap-interface-v1\\src\\pages\\AddLiquidity\\index.tsx",["783","784"],"import React, { useCallback, useState } from 'react'\r\nimport { BigNumber } from '@ethersproject/bignumber'\r\nimport { TransactionResponse } from '@ethersproject/providers'\r\nimport { Currency, currencyEquals, ETHER, TokenAmount, WETH } from '@paiswap/sdk'\r\nimport { Button, CardBody, AddIcon, Text as UIKitText } from '@pancakeswap-libs/uikit'\r\nimport styled from 'styled-components'\r\nimport { RouteComponentProps } from 'react-router-dom'\r\nimport { LightCard } from 'components/Card'\r\nimport { AutoColumn, ColumnCenter } from 'components/Column'\r\nimport TransactionConfirmationModal, { ConfirmationModalContent } from 'components/TransactionConfirmationModal'\r\nimport CardNav from 'components/CardNav'\r\nimport CurrencyInputPanel from 'components/CurrencyInputPanel'\r\nimport DoubleCurrencyLogo from 'components/DoubleLogo'\r\nimport { AddRemoveTabs } from 'components/NavigationTabs'\r\nimport { MinimalPositionCard } from 'components/PositionCard'\r\nimport Row, { RowBetween, RowFlat } from 'components/Row'\r\nimport NewButton from 'components/NewButton'\r\n\r\nimport { PairState } from 'data/Reserves'\r\nimport { useActiveWeb3React } from 'hooks'\r\nimport { useCurrency } from 'hooks/Tokens'\r\nimport { ApprovalState, useApproveCallback } from 'hooks/useApproveCallback'\r\nimport { Field } from 'state/mint/actions'\r\nimport { useDerivedMintInfo, useMintActionHandlers, useMintState } from 'state/mint/hooks'\r\n\r\nimport { useTransactionAdder } from 'state/transactions/hooks'\r\nimport { useIsExpertMode, useUserDeadline, useUserSlippageTolerance } from 'state/user/hooks'\r\nimport { calculateGasMargin, calculateSlippageAmount, getRouterContract } from 'utils'\r\nimport { maxAmountSpend } from 'utils/maxAmountSpend'\r\nimport { wrappedCurrency } from 'utils/wrappedCurrency'\r\nimport { currencyId } from 'utils/currencyId'\r\nimport Pane from 'components/Pane'\r\nimport Container from 'components/Container'\r\nimport ConnectWalletButton from 'components/ConnectWalletButton'\r\nimport useI18n from 'hooks/useI18n'\r\nimport AppBody from '../AppBody'\r\nimport { Dots, Wrapper } from '../Pool/styleds'\r\nimport { ConfirmAddModalBottom } from './ConfirmAddModalBottom'\r\nimport { PoolPriceBar } from './PoolPriceBar'\r\nimport { ROUTER_ADDRESS } from '../../constants'\r\nimport './index.scss'\r\n\r\nexport default function AddLiquidity({\r\n  match: {\r\n    params: { currencyIdA, currencyIdB },\r\n  },\r\n  history,\r\n}: RouteComponentProps<{ currencyIdA?: string; currencyIdB?: string }>) {\r\n  const { account, chainId, library } = useActiveWeb3React()\r\n  const currencyA = useCurrency(currencyIdA)\r\n  const currencyB = useCurrency(currencyIdB)\r\n  const TranslateString = useI18n()\r\n\r\n  const oneCurrencyIsWBNB = Boolean(\r\n    chainId &&\r\n      ((currencyA && currencyEquals(currencyA, WETH[chainId])) ||\r\n        (currencyB && currencyEquals(currencyB, WETH[chainId])))\r\n  )\r\n  const expertMode = useIsExpertMode()\r\n\r\n  // mint state\r\n  const { independentField, typedValue, otherTypedValue } = useMintState()\r\n  const {\r\n    dependentField,\r\n    currencies,\r\n    pair,\r\n    pairState,\r\n    currencyBalances,\r\n    parsedAmounts,\r\n    price,\r\n    noLiquidity,\r\n    liquidityMinted,\r\n    poolTokenPercentage,\r\n    error,\r\n  } = useDerivedMintInfo(currencyA ?? undefined, currencyB ?? undefined)\r\n  const { onFieldAInput, onFieldBInput } = useMintActionHandlers(noLiquidity)\r\n\r\n  const isValid = !error\r\n\r\n  // modal and loading\r\n  const [showConfirm, setShowConfirm] = useState<boolean>(false)\r\n  const [attemptingTxn, setAttemptingTxn] = useState<boolean>(false) // clicked confirm\r\n\r\n  // txn values\r\n  const [deadline] = useUserDeadline() // custom from users settings\r\n  const [allowedSlippage] = useUserSlippageTolerance() // custom from users\r\n  const [txHash, setTxHash] = useState<string>('')\r\n\r\n  // get formatted amounts\r\n  const formattedAmounts = {\r\n    [independentField]: typedValue,\r\n    [dependentField]: noLiquidity ? otherTypedValue : parsedAmounts[dependentField]?.toSignificant(6) ?? '',\r\n  }\r\n\r\n  // get the max amounts user can add\r\n  const maxAmounts: { [field in Field]?: TokenAmount } = [Field.CURRENCY_A, Field.CURRENCY_B].reduce(\r\n    (accumulator, field) => {\r\n      return {\r\n        ...accumulator,\r\n        [field]: maxAmountSpend(currencyBalances[field]),\r\n      }\r\n    },\r\n    {}\r\n  )\r\n\r\n  const atMaxAmounts: { [field in Field]?: TokenAmount } = [Field.CURRENCY_A, Field.CURRENCY_B].reduce(\r\n    (accumulator, field) => {\r\n      return {\r\n        ...accumulator,\r\n        [field]: maxAmounts[field]?.equalTo(parsedAmounts[field] ?? '0'),\r\n      }\r\n    },\r\n    {}\r\n  )\r\n\r\n  // check whether the user has approved the router on the tokens\r\n  const [approvalA, approveACallback] = useApproveCallback(parsedAmounts[Field.CURRENCY_A], ROUTER_ADDRESS)\r\n  const [approvalB, approveBCallback] = useApproveCallback(parsedAmounts[Field.CURRENCY_B], ROUTER_ADDRESS)\r\n\r\n  const addTransaction = useTransactionAdder()\r\n\r\n  async function onAdd() {\r\n    if (!chainId || !library || !account) return\r\n    const router = getRouterContract(chainId, library, account)\r\n\r\n    const { [Field.CURRENCY_A]: parsedAmountA, [Field.CURRENCY_B]: parsedAmountB } = parsedAmounts\r\n    if (!parsedAmountA || !parsedAmountB || !currencyA || !currencyB) {\r\n      return\r\n    }\r\n\r\n    const amountsMin = {\r\n      [Field.CURRENCY_A]: calculateSlippageAmount(parsedAmountA, noLiquidity ? 0 : allowedSlippage)[0],\r\n      [Field.CURRENCY_B]: calculateSlippageAmount(parsedAmountB, noLiquidity ? 0 : allowedSlippage)[0],\r\n    }\r\n\r\n    const deadlineFromNow = Math.ceil(Date.now() / 1000) + deadline\r\n\r\n    let estimate\r\n    let method: (...args: any) => Promise<TransactionResponse>\r\n    let args: Array<string | string[] | number>\r\n    let value: BigNumber | null\r\n    if (currencyA === ETHER || currencyB === ETHER) {\r\n      const tokenBIsBNB = currencyB === ETHER\r\n      estimate = router.estimateGas.addLiquidityETH\r\n      method = router.addLiquidityETH\r\n      args = [\r\n        wrappedCurrency(tokenBIsBNB ? currencyA : currencyB, chainId)?.address ?? '', // token\r\n        (tokenBIsBNB ? parsedAmountA : parsedAmountB).raw.toString(), // token desired\r\n        amountsMin[tokenBIsBNB ? Field.CURRENCY_A : Field.CURRENCY_B].toString(), // token min\r\n        amountsMin[tokenBIsBNB ? Field.CURRENCY_B : Field.CURRENCY_A].toString(), // eth min\r\n        account,\r\n        deadlineFromNow,\r\n      ]\r\n      value = BigNumber.from((tokenBIsBNB ? parsedAmountB : parsedAmountA).raw.toString())\r\n    } else {\r\n      estimate = router.estimateGas.addLiquidity\r\n      method = router.addLiquidity\r\n      args = [\r\n        wrappedCurrency(currencyA, chainId)?.address ?? '',\r\n        wrappedCurrency(currencyB, chainId)?.address ?? '',\r\n        parsedAmountA.raw.toString(),\r\n        parsedAmountB.raw.toString(),\r\n        amountsMin[Field.CURRENCY_A].toString(),\r\n        amountsMin[Field.CURRENCY_B].toString(),\r\n        account,\r\n        deadlineFromNow,\r\n      ]\r\n      value = null\r\n    }\r\n\r\n    setAttemptingTxn(true)\r\n    // const aa = await estimate(...args, value ? { value } : {})\r\n    await estimate(...args, value ? { value } : {})\r\n      .then((estimatedGasLimit) =>\r\n        method(...args, {\r\n          ...(value ? { value } : {}),\r\n          gasLimit: calculateGasMargin(estimatedGasLimit),\r\n        }).then((response) => {\r\n          setAttemptingTxn(false)\r\n\r\n          addTransaction(response, {\r\n            summary: `Add ${parsedAmounts[Field.CURRENCY_A]?.toSignificant(3)} ${\r\n              currencies[Field.CURRENCY_A]?.symbol\r\n            } and ${parsedAmounts[Field.CURRENCY_B]?.toSignificant(3)} ${currencies[Field.CURRENCY_B]?.symbol}`,\r\n          })\r\n\r\n          setTxHash(response.hash)\r\n        })\r\n      )\r\n      .catch((e) => {\r\n        setAttemptingTxn(false)\r\n        // we only care if the error is something _other_ than the user rejected the tx\r\n        if (e?.code !== 4001) {\r\n          console.error(e)\r\n        }\r\n      })\r\n  }\r\n\r\n  const modalHeader = () => {\r\n    return noLiquidity ? (\r\n      <AutoColumn gap=\"20px\">\r\n        <LightCard mt=\"20px\" borderRadius=\"20px\">\r\n          <RowFlat>\r\n            <UIKitText fontSize=\"48px\" mr=\"8px\">\r\n              {`${currencies[Field.CURRENCY_A]?.symbol}/${currencies[Field.CURRENCY_B]?.symbol}`}\r\n            </UIKitText>\r\n            <DoubleCurrencyLogo\r\n              currency0={currencies[Field.CURRENCY_A]}\r\n              currency1={currencies[Field.CURRENCY_B]}\r\n              size={30}\r\n            />\r\n          </RowFlat>\r\n        </LightCard>\r\n      </AutoColumn>\r\n    ) : (\r\n      <AutoColumn gap=\"20px\">\r\n        <RowFlat style={{ marginTop: '20px' }}>\r\n          <UIKitText fontSize=\"48px\" mr=\"8px\">\r\n            {liquidityMinted?.toSignificant(6)}\r\n          </UIKitText>\r\n          <DoubleCurrencyLogo\r\n            currency0={currencies[Field.CURRENCY_A]}\r\n            currency1={currencies[Field.CURRENCY_B]}\r\n            size={30}\r\n          />\r\n        </RowFlat>\r\n        <Row>\r\n          <UIKitText fontSize=\"24px\">\r\n            {`${currencies[Field.CURRENCY_A]?.symbol}/${currencies[Field.CURRENCY_B]?.symbol} Pool Tokens`}\r\n          </UIKitText>\r\n        </Row>\r\n        <UIKitText small textAlign=\"left\" padding=\"8px 0 0 0 \" style={{ fontStyle: 'italic' }}>\r\n          {`Output is estimated. If the price changes by more than ${\r\n            allowedSlippage / 100\r\n          }% your transaction will revert.`}\r\n        </UIKitText>\r\n      </AutoColumn>\r\n    )\r\n  }\r\n\r\n  const modalBottom = () => {\r\n    return (\r\n      <ConfirmAddModalBottom\r\n        price={price}\r\n        currencies={currencies}\r\n        parsedAmounts={parsedAmounts}\r\n        noLiquidity={noLiquidity}\r\n        onAdd={onAdd}\r\n        poolTokenPercentage={poolTokenPercentage}\r\n      />\r\n    )\r\n  }\r\n\r\n  const pendingText = `Supplying ${parsedAmounts[Field.CURRENCY_A]?.toSignificant(6)} ${\r\n    currencies[Field.CURRENCY_A]?.symbol\r\n  } and ${parsedAmounts[Field.CURRENCY_B]?.toSignificant(6)} ${currencies[Field.CURRENCY_B]?.symbol}`\r\n\r\n  const handleCurrencyASelect = useCallback(\r\n    (currA: Currency) => {\r\n      const newCurrencyIdA = currencyId(currA)\r\n      if (newCurrencyIdA === currencyIdB) {\r\n        history.push(`/add/${currencyIdB}/${currencyIdA}`)\r\n      } else {\r\n        history.push(`/add/${newCurrencyIdA}/${currencyIdB}`)\r\n      }\r\n    },\r\n    [currencyIdB, history, currencyIdA]\r\n  )\r\n  const handleCurrencyBSelect = useCallback(\r\n    (currB: Currency) => {\r\n      const newCurrencyIdB = currencyId(currB)\r\n      if (currencyIdA === newCurrencyIdB) {\r\n        if (currencyIdB) {\r\n          history.push(`/add/${currencyIdB}/${newCurrencyIdB}`)\r\n        } else {\r\n          history.push(`/add/${newCurrencyIdB}`)\r\n        }\r\n      } else {\r\n        history.push(`/add/${currencyIdA || 'PI'}/${newCurrencyIdB}`)\r\n      }\r\n    },\r\n    [currencyIdA, history, currencyIdB]\r\n  )\r\n\r\n  const handleDismissConfirmation = useCallback(() => {\r\n    setShowConfirm(false)\r\n    // if there was a tx hash, we want to clear the input\r\n    if (txHash) {\r\n      onFieldAInput('')\r\n    }\r\n    setTxHash('')\r\n  }, [onFieldAInput, txHash])\r\n\r\n  return (\r\n    <Container>\r\n      {/* <CardNav activeIndex={1} /> */}\r\n      <AppBody>\r\n        <AddRemoveTabs adding />\r\n        <Wrapper id=\"add-page\">\r\n          <TransactionConfirmationModal\r\n            isOpen={showConfirm}\r\n            onDismiss={handleDismissConfirmation}\r\n            attemptingTxn={attemptingTxn}\r\n            hash={txHash}\r\n            content={() => (\r\n              <ConfirmationModalContent\r\n                title={\r\n                  noLiquidity\r\n                    ? TranslateString(1154, 'You are creating a pool')\r\n                    : TranslateString(1156, 'You will receive')\r\n                }\r\n                onDismiss={handleDismissConfirmation}\r\n                topContent={modalHeader}\r\n                bottomContent={modalBottom}\r\n              />\r\n            )}\r\n            pendingText={pendingText}\r\n          />\r\n          <CardBody>\r\n            <AutoColumn gap=\"20px\">\r\n              {noLiquidity && (\r\n                <ColumnCenter>\r\n                  <Pane>\r\n                    <AutoColumn gap=\"12px\">\r\n                      <UIKitText>{TranslateString(1158, 'You are the first liquidity provider.')}</UIKitText>\r\n                      <UIKitText>\r\n                        {TranslateString(1160, 'The ratio of tokens you add will set the price of this pool.')}\r\n                      </UIKitText>\r\n                      <UIKitText>\r\n                        {TranslateString(1162, 'Once you are happy with the rate click supply to review.')}\r\n                      </UIKitText>\r\n                    </AutoColumn>\r\n                  </Pane>\r\n                </ColumnCenter>\r\n              )}\r\n              <CurrencyInputPanel\r\n                value={formattedAmounts[Field.CURRENCY_A]}\r\n                onUserInput={onFieldAInput}\r\n                onMax={() => {\r\n                  onFieldAInput(maxAmounts[Field.CURRENCY_A]?.toExact() ?? '')\r\n                }}\r\n                onCurrencySelect={handleCurrencyASelect}\r\n                showMaxButton={!atMaxAmounts[Field.CURRENCY_A]}\r\n                currency={currencies[Field.CURRENCY_A]}\r\n                id=\"add-liquidity-input-tokena\"\r\n                showCommonBases={false}\r\n              />\r\n              <ColumnCenter>\r\n                <AddIcon color=\"textSubtle\" />\r\n              </ColumnCenter>\r\n              <CurrencyInputPanel\r\n                value={formattedAmounts[Field.CURRENCY_B]}\r\n                onUserInput={onFieldBInput}\r\n                onCurrencySelect={handleCurrencyBSelect}\r\n                onMax={() => {\r\n                  onFieldBInput(maxAmounts[Field.CURRENCY_B]?.toExact() ?? '')\r\n                }}\r\n                showMaxButton={!atMaxAmounts[Field.CURRENCY_B]}\r\n                currency={currencies[Field.CURRENCY_B]}\r\n                id=\"add-liquidity-input-tokenb\"\r\n                showCommonBases={false}\r\n              />\r\n              {currencies[Field.CURRENCY_A] && currencies[Field.CURRENCY_B] && pairState !== PairState.INVALID && (\r\n                <div>\r\n                  <UIKitText\r\n                    style={{ textTransform: 'uppercase', fontWeight: 600 }}\r\n                    color=\"textSubtle\"\r\n                    fontSize=\"12px\"\r\n                    mb=\"2px\"\r\n                  >\r\n                    {noLiquidity\r\n                      ? TranslateString(1164, 'Initial prices and pool share')\r\n                      : TranslateString(1166, 'Prices and pool share')}\r\n                  </UIKitText>\r\n                  <Pane>\r\n                    <PoolPriceBar\r\n                      currencies={currencies}\r\n                      poolTokenPercentage={poolTokenPercentage}\r\n                      noLiquidity={noLiquidity}\r\n                      price={price}\r\n                    />\r\n                  </Pane>\r\n                </div>\r\n              )}\r\n\r\n              {!account ? (\r\n                <ConnectWalletButton width=\"100%\" />\r\n              ) : (\r\n                <AutoColumn gap=\"md\">\r\n                  {(approvalA === ApprovalState.NOT_APPROVED ||\r\n                    approvalA === ApprovalState.PENDING ||\r\n                    approvalB === ApprovalState.NOT_APPROVED ||\r\n                    approvalB === ApprovalState.PENDING) &&\r\n                    isValid && (\r\n                      <NewButton>\r\n                      <RowBetween>\r\n                        {approvalA !== ApprovalState.APPROVED && (\r\n                          <Button\r\n                            onClick={approveACallback}\r\n                            disabled={approvalA === ApprovalState.PENDING}\r\n                            style={{ width: approvalB !== ApprovalState.APPROVED ? '48%' : '100%' }}\r\n                          >\r\n                            {approvalA === ApprovalState.PENDING ? (\r\n                              <Dots>Approving {currencies[Field.CURRENCY_A]?.symbol}</Dots>\r\n                            ) : (\r\n                              `Approve ${currencies[Field.CURRENCY_A]?.symbol}`\r\n                            )}\r\n                          </Button>\r\n                        )}\r\n                        {approvalB !== ApprovalState.APPROVED && (\r\n                          <Button\r\n                            onClick={approveBCallback}\r\n                            disabled={approvalB === ApprovalState.PENDING}\r\n                            style={{ width: approvalA !== ApprovalState.APPROVED ? '48%' : '100%' }}\r\n                          >\r\n                            {approvalB === ApprovalState.PENDING ? (\r\n                              <Dots>Approving {currencies[Field.CURRENCY_B]?.symbol}</Dots>\r\n                            ) : (\r\n                              `Approve ${currencies[Field.CURRENCY_B]?.symbol}`\r\n                            )}\r\n                          </Button>\r\n                        )}\r\n                      </RowBetween>\r\n                      </NewButton>\r\n                    )}\r\n                  <NewButton>\r\n                  <Button\r\n                    onClick={() => {\r\n                      if (expertMode) {\r\n                        onAdd()\r\n                      } else {\r\n                        setShowConfirm(true)\r\n                      }\r\n                    }}\r\n                    // disabled\r\n                    disabled={!isValid || approvalA !== ApprovalState.APPROVED || approvalB !== ApprovalState.APPROVED}\r\n                    variant={\r\n                      !isValid && !!parsedAmounts[Field.CURRENCY_A] && !!parsedAmounts[Field.CURRENCY_B]\r\n                        ? 'danger'\r\n                        : 'primary'\r\n                    }\r\n                    width=\"100%\"\r\n                  >\r\n                    {error ?? \"Supply\"}\r\n                  </Button>\r\n                  </NewButton>\r\n                </AutoColumn>\r\n              )}\r\n            </AutoColumn>\r\n          </CardBody>\r\n        </Wrapper>\r\n      </AppBody>\r\n      {pair && !noLiquidity && pairState !== PairState.INVALID ? (\r\n        <AutoColumn style={{ width: '100%', maxWidth: '720px', marginTop: '1rem' }}>\r\n          <MinimalPositionCard showUnwrapped={oneCurrencyIsWBNB} pair={pair} />\r\n        </AutoColumn>\r\n      ) : null}\r\n    </Container>\r\n  )\r\n}\r\n","D:\\Code\\swap-interface-v1\\src\\pages\\RemoveLiquidity\\index.tsx",["785","786","787","788"],"import React, { useCallback, useContext, useMemo, useState } from 'react'\r\nimport styled, { ThemeContext } from 'styled-components'\r\nimport { splitSignature } from '@ethersproject/bytes'\r\nimport { Contract } from '@ethersproject/contracts'\r\nimport { TransactionResponse } from '@ethersproject/providers'\r\nimport { Currency, currencyEquals, ETHER, Percent, WETH } from '@paiswap/sdk'\r\nimport { Button, Flex, Text } from '@pancakeswap-libs/uikit'\r\nimport { ArrowDown, Plus } from 'react-feather'\r\nimport { RouteComponentProps } from 'react-router'\r\n\r\nimport { BigNumber } from '@ethersproject/bignumber'\r\nimport ConnectWalletButton from 'components/ConnectWalletButton'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { AutoColumn, ColumnCenter } from '../../components/Column'\r\nimport TransactionConfirmationModal, { ConfirmationModalContent } from '../../components/TransactionConfirmationModal'\r\nimport CurrencyInputPanel from '../../components/CurrencyInputPanel'\r\nimport DoubleCurrencyLogo from '../../components/DoubleLogo'\r\nimport { AddRemoveTabs } from '../../components/NavigationTabs'\r\nimport { MinimalPositionCard } from '../../components/PositionCard'\r\nimport { RowBetween, RowFixed } from '../../components/Row'\r\nimport Container from '../../components/Container'\r\nimport NewButton from '../../components/NewButton'\r\n\r\nimport Slider from '../../components/Slider'\r\nimport CurrencyLogo from '../../components/CurrencyLogo'\r\nimport { ROUTER_ADDRESS } from '../../constants'\r\nimport { useActiveWeb3React } from '../../hooks'\r\nimport { useCurrency } from '../../hooks/Tokens'\r\nimport { usePairContract } from '../../hooks/useContract'\r\n\r\nimport { useTransactionAdder } from '../../state/transactions/hooks'\r\nimport { StyledInternalLink } from '../../components/Shared'\r\nimport { calculateGasMargin, calculateSlippageAmount, getRouterContract } from '../../utils'\r\nimport { currencyId } from '../../utils/currencyId'\r\nimport useDebouncedChangeHandler from '../../utils/useDebouncedChangeHandler'\r\nimport { wrappedCurrency } from '../../utils/wrappedCurrency'\r\nimport AppBody from '../AppBody'\r\nimport { ClickableText, Wrapper } from '../Pool/styleds'\r\nimport { useApproveCallback, ApprovalState } from '../../hooks/useApproveCallback'\r\nimport { Dots } from '../../components/swap/styleds'\r\nimport { useBurnActionHandlers, useDerivedBurnInfo, useBurnState } from '../../state/burn/hooks'\r\n\r\nimport { Field } from '../../state/burn/actions'\r\nimport { useUserDeadline, useUserSlippageTolerance } from '../../state/user/hooks'\r\nimport './index.scss'\r\n\r\nconst OutlineCard = styled.div`\r\n  border: 1px solid ${({ theme }) => theme.colors.borderColor};\r\n  border-radius: 16px;\r\n  padding: 24px;\r\n`\r\n\r\nconst Body = styled.div`\r\n  padding-left: 24px;\r\n  padding-right: 24px;\r\n`\r\n\r\nexport default function RemoveLiquidity({\r\n  history,\r\n  match: {\r\n    params: { currencyIdA, currencyIdB },\r\n  },\r\n}: RouteComponentProps<{ currencyIdA: string; currencyIdB: string }>) {\r\n  const [currencyA, currencyB] = [useCurrency(currencyIdA) ?? undefined, useCurrency(currencyIdB) ?? undefined]\r\n  const { account, chainId, library } = useActiveWeb3React()\r\n  const TranslateString = useI18n()\r\n  const [tokenA, tokenB] = useMemo(() => [wrappedCurrency(currencyA, chainId), wrappedCurrency(currencyB, chainId)], [\r\n    currencyA,\r\n    currencyB,\r\n    chainId,\r\n  ])\r\n\r\n  const theme = useContext(ThemeContext)\r\n\r\n  // burn state\r\n  const { independentField, typedValue } = useBurnState()\r\n  const { pair, parsedAmounts, error } = useDerivedBurnInfo(currencyA ?? undefined, currencyB ?? undefined)\r\n  const { onUserInput: _onUserInput } = useBurnActionHandlers()\r\n  const isValid = !error\r\n\r\n  // modal and loading\r\n  const [showConfirm, setShowConfirm] = useState<boolean>(false)\r\n  const [showDetailed, setShowDetailed] = useState<boolean>(false)\r\n  const [attemptingTxn, setAttemptingTxn] = useState(false) // clicked confirm\r\n\r\n  // txn values\r\n  const [txHash, setTxHash] = useState<string>('')\r\n  const [deadline] = useUserDeadline()\r\n  const [allowedSlippage] = useUserSlippageTolerance()\r\n\r\n  const formattedAmounts = {\r\n    [Field.LIQUIDITY_PERCENT]: parsedAmounts[Field.LIQUIDITY_PERCENT].equalTo('0')\r\n      ? '0'\r\n      : parsedAmounts[Field.LIQUIDITY_PERCENT].lessThan(new Percent('1', '100'))\r\n      ? '<1'\r\n      : parsedAmounts[Field.LIQUIDITY_PERCENT].toFixed(0),\r\n    [Field.LIQUIDITY]:\r\n      independentField === Field.LIQUIDITY ? typedValue : parsedAmounts[Field.LIQUIDITY]?.toSignificant(6) ?? '',\r\n    [Field.CURRENCY_A]:\r\n      independentField === Field.CURRENCY_A ? typedValue : parsedAmounts[Field.CURRENCY_A]?.toSignificant(6) ?? '',\r\n    [Field.CURRENCY_B]:\r\n      independentField === Field.CURRENCY_B ? typedValue : parsedAmounts[Field.CURRENCY_B]?.toSignificant(6) ?? '',\r\n  }\r\n\r\n  const atMaxAmount = parsedAmounts[Field.LIQUIDITY_PERCENT]?.equalTo(new Percent('1'))\r\n\r\n  // pair contract\r\n  const pairContract: Contract | null = usePairContract(pair?.liquidityToken?.address)\r\n\r\n  // allowance handling\r\n  const [signatureData, setSignatureData] = useState<{ v: number; r: string; s: string; deadline: number } | null>(null)\r\n  const [approval, approveCallback] = useApproveCallback(parsedAmounts[Field.LIQUIDITY], ROUTER_ADDRESS)\r\n  async function onAttemptToApprove() {\r\n    if (!pairContract || !pair || !library) throw new Error('missing dependencies')\r\n    const liquidityAmount = parsedAmounts[Field.LIQUIDITY]\r\n    if (!liquidityAmount) throw new Error('missing liquidity amount')\r\n    // try to gather a signature for permission\r\n    const nonce = await pairContract.nonces(account)\r\n\r\n    const deadlineForSignature: number = Math.ceil(Date.now() / 1000) + deadline\r\n\r\n    console.log(\"==================================\", pair.liquidityToken.address)\r\n\r\n    const EIP712Domain = [\r\n      { name: 'name', type: 'string' },\r\n      { name: 'version', type: 'string' },\r\n      { name: 'chainId', type: 'uint256' },\r\n      { name: 'verifyingContract', type: 'address' },\r\n    ]\r\n    const domain = {\r\n      name: 'Pancake LPs',\r\n      version: '1',\r\n      chainId,\r\n      verifyingContract: pair.liquidityToken.address,\r\n    }\r\n    const Permit = [\r\n      { name: 'owner', type: 'address' },\r\n      { name: 'spender', type: 'address' },\r\n      { name: 'value', type: 'uint256' },\r\n      { name: 'nonce', type: 'uint256' },\r\n      { name: 'deadline', type: 'uint256' },\r\n    ]\r\n    const message = {\r\n      owner: account,\r\n      spender: ROUTER_ADDRESS,\r\n      value: liquidityAmount.raw.toString(),\r\n      nonce: nonce.toHexString(),\r\n      deadline: deadlineForSignature,\r\n    }\r\n    const data = JSON.stringify({\r\n      types: {\r\n        EIP712Domain,\r\n        Permit,\r\n      },\r\n      domain,\r\n      primaryType: 'Permit',\r\n      message,\r\n    })\r\n    console.log(account, data)\r\n\r\n\r\n    library\r\n      .send('eth_signTypedData_v4', [account, data])\r\n      .then(splitSignature)\r\n      .then((signature) => {\r\n\r\n        setSignatureData({\r\n          v: signature.v,\r\n          r: signature.r,\r\n          s: signature.s,\r\n          deadline: deadlineForSignature,\r\n        })\r\n      })\r\n      .catch((e) => {\r\n        console.log(e)\r\n        // for all errors other than 4001 (EIP-1193 user rejected request), fall back to manual approve\r\n        if (e?.code !== 4001) {\r\n          approveCallback()\r\n        }\r\n      })\r\n  }\r\n\r\n  // wrapped onUserInput to clear signatures\r\n  const onUserInput = useCallback(\r\n    (field: Field, val: string) => {\r\n      setSignatureData(null)\r\n      return _onUserInput(field, val)\r\n    },\r\n    [_onUserInput]\r\n  )\r\n\r\n  const onLiquidityInput = useCallback((val: string): void => onUserInput(Field.LIQUIDITY, val), [onUserInput])\r\n  const onCurrencyAInput = useCallback((val: string): void => onUserInput(Field.CURRENCY_A, val), [onUserInput])\r\n  const onCurrencyBInput = useCallback((val: string): void => onUserInput(Field.CURRENCY_B, val), [onUserInput])\r\n\r\n  // tx sending\r\n  const addTransaction = useTransactionAdder()\r\n  async function onRemove() {\r\n    if (!chainId || !library || !account) throw new Error('missing dependencies')\r\n    const { [Field.CURRENCY_A]: currencyAmountA, [Field.CURRENCY_B]: currencyAmountB } = parsedAmounts\r\n    if (!currencyAmountA || !currencyAmountB) {\r\n      throw new Error('missing currency amounts')\r\n    }\r\n    const router = getRouterContract(chainId, library, account)\r\n\r\n    const amountsMin = {\r\n      [Field.CURRENCY_A]: calculateSlippageAmount(currencyAmountA, allowedSlippage)[0],\r\n      [Field.CURRENCY_B]: calculateSlippageAmount(currencyAmountB, allowedSlippage)[0],\r\n    }\r\n\r\n    if (!currencyA || !currencyB) throw new Error('missing tokens')\r\n    const liquidityAmount = parsedAmounts[Field.LIQUIDITY]\r\n    if (!liquidityAmount) throw new Error('missing liquidity amount')\r\n\r\n    const currencyBIsETH = currencyB === ETHER\r\n    const oneCurrencyIsETH = currencyA === ETHER || currencyBIsETH\r\n    const deadlineFromNow = Math.ceil(Date.now() / 1000) + deadline\r\n\r\n    if (!tokenA || !tokenB) throw new Error('could not wrap')\r\n\r\n    let methodNames: string[]\r\n    let args: Array<string | string[] | number | boolean>\r\n    // we have approval, use normal remove liquidity\r\n    if (approval === ApprovalState.APPROVED) {\r\n      // removeLiquidityETH\r\n      if (oneCurrencyIsETH) {\r\n        methodNames = ['removeLiquidityETH', 'removeLiquidityETHSupportingFeeOnTransferTokens']\r\n        args = [\r\n          currencyBIsETH ? tokenA.address : tokenB.address,\r\n          liquidityAmount.raw.toString(),\r\n          amountsMin[currencyBIsETH ? Field.CURRENCY_A : Field.CURRENCY_B].toString(),\r\n          amountsMin[currencyBIsETH ? Field.CURRENCY_B : Field.CURRENCY_A].toString(),\r\n          account,\r\n          deadlineFromNow,\r\n        ]\r\n      }\r\n      // removeLiquidity\r\n      else {\r\n        methodNames = ['removeLiquidity']\r\n        args = [\r\n          tokenA.address,\r\n          tokenB.address,\r\n          liquidityAmount.raw.toString(),\r\n          amountsMin[Field.CURRENCY_A].toString(),\r\n          amountsMin[Field.CURRENCY_B].toString(),\r\n          account,\r\n          deadlineFromNow,\r\n        ]\r\n      }\r\n    }\r\n    // we have a signataure, use permit versions of remove liquidity\r\n    else if (signatureData !== null) {\r\n      // removeLiquidityETHWithPermit\r\n      if (oneCurrencyIsETH) {\r\n        methodNames = ['removeLiquidityETHWithPermit', 'removeLiquidityETHWithPermitSupportingFeeOnTransferTokens']\r\n        args = [\r\n          currencyBIsETH ? tokenA.address : tokenB.address,\r\n          liquidityAmount.raw.toString(),\r\n          amountsMin[currencyBIsETH ? Field.CURRENCY_A : Field.CURRENCY_B].toString(),\r\n          amountsMin[currencyBIsETH ? Field.CURRENCY_B : Field.CURRENCY_A].toString(),\r\n          account,\r\n          signatureData.deadline,\r\n          false,\r\n          signatureData.v,\r\n          signatureData.r,\r\n          signatureData.s,\r\n        ]\r\n      }\r\n      // removeLiquidityETHWithPermit\r\n      else {\r\n        methodNames = ['removeLiquidityWithPermit']\r\n        args = [\r\n          tokenA.address,\r\n          tokenB.address,\r\n          liquidityAmount.raw.toString(),\r\n          amountsMin[Field.CURRENCY_A].toString(),\r\n          amountsMin[Field.CURRENCY_B].toString(),\r\n          account,\r\n          signatureData.deadline,\r\n          false,\r\n          signatureData.v,\r\n          signatureData.r,\r\n          signatureData.s,\r\n        ]\r\n      }\r\n    } else {\r\n      throw new Error('Attempting to confirm without approval or a signature. Please contact support.')\r\n    }\r\n    const safeGasEstimates: (BigNumber | undefined)[] = await Promise.all(\r\n      methodNames.map((methodName, index) =>\r\n        router.estimateGas[methodName](...args)\r\n          .then(calculateGasMargin)\r\n          .catch((e) => {\r\n            console.error(`estimateGas failed`, index, methodName, args, e)\r\n            return undefined\r\n          })\r\n      )\r\n    )\r\n\r\n    const indexOfSuccessfulEstimation = safeGasEstimates.findIndex((safeGasEstimate) =>\r\n      BigNumber.isBigNumber(safeGasEstimate)\r\n    )\r\n\r\n    // all estimations failed...\r\n    if (indexOfSuccessfulEstimation === -1) {\r\n      console.error('This transaction would fail. Please contact support.')\r\n    } else {\r\n      const methodName = methodNames[indexOfSuccessfulEstimation]\r\n      const safeGasEstimate = safeGasEstimates[indexOfSuccessfulEstimation]\r\n\r\n      setAttemptingTxn(true)\r\n      await router[methodName](...args, {\r\n        gasLimit: safeGasEstimate,\r\n      })\r\n        .then((response: TransactionResponse) => {\r\n          setAttemptingTxn(false)\r\n\r\n          addTransaction(response, {\r\n            summary: `Remove ${parsedAmounts[Field.CURRENCY_A]?.toSignificant(3)} ${\r\n              currencyA?.symbol\r\n            } and ${parsedAmounts[Field.CURRENCY_B]?.toSignificant(3)} ${currencyB?.symbol}`,\r\n          })\r\n\r\n          setTxHash(response.hash)\r\n        })\r\n        .catch((e: Error) => {\r\n          setAttemptingTxn(false)\r\n          // we only care if the error is something _other_ than the user rejected the tx\r\n          console.error(e)\r\n        })\r\n    }\r\n  }\r\n\r\n  function modalHeader() {\r\n    return (\r\n      <AutoColumn gap=\"md\" style={{ marginTop: '20px' }}>\r\n        <RowBetween align=\"flex-end\">\r\n          <Text fontSize=\"24px\">{parsedAmounts[Field.CURRENCY_A]?.toSignificant(6)}</Text>\r\n          <RowFixed gap=\"4px\">\r\n            <CurrencyLogo currency={currencyA} size=\"24px\" />\r\n            <Text fontSize=\"24px\" style={{ marginLeft: '10px' }}>\r\n              {currencyA?.symbol}\r\n            </Text>\r\n          </RowFixed>\r\n        </RowBetween>\r\n        <RowFixed>\r\n          <Plus size=\"16\" color={theme.colors.textSubtle} />\r\n        </RowFixed>\r\n        <RowBetween align=\"flex-end\">\r\n          <Text fontSize=\"24px\">{parsedAmounts[Field.CURRENCY_B]?.toSignificant(6)}</Text>\r\n          <RowFixed gap=\"4px\">\r\n            <CurrencyLogo currency={currencyB} size=\"24px\" />\r\n            <Text fontSize=\"24px\" style={{ marginLeft: '10px' }}>\r\n              {currencyB?.symbol}\r\n            </Text>\r\n          </RowFixed>\r\n        </RowBetween>\r\n\r\n        <Text small color=\"textSubtle\" textAlign=\"left\" padding=\"12px 0 0 0\" style={{ fontStyle: 'italic' }}>\r\n          {`Output is estimated. If the price changes by more than ${\r\n            allowedSlippage / 100\r\n          }% your transaction will revert.`}\r\n        </Text>\r\n      </AutoColumn>\r\n    )\r\n  }\r\n\r\n  function modalBottom() {\r\n    return (\r\n      <>\r\n        <RowBetween>\r\n          <Text color=\"textSubtle\">{`${currencyA?.symbol}/${currencyB?.symbol}`} LP Burned</Text>\r\n          <RowFixed>\r\n            <DoubleCurrencyLogo currency0={currencyA} currency1={currencyB} margin />\r\n            <Text>{parsedAmounts[Field.LIQUIDITY]?.toSignificant(6)}</Text>\r\n          </RowFixed>\r\n        </RowBetween>\r\n        {pair && (\r\n          <>\r\n            <RowBetween>\r\n              <Text color=\"textSubtle\">{TranslateString(1182, 'Price')}</Text>\r\n              <Text>\r\n                1 {currencyA?.symbol} = {tokenA ? pair.priceOf(tokenA).toSignificant(6) : '-'} {currencyB?.symbol}\r\n              </Text>\r\n            </RowBetween>\r\n            <RowBetween>\r\n              <div />\r\n              <Text>\r\n                1 {currencyB?.symbol} = {tokenB ? pair.priceOf(tokenB).toSignificant(6) : '-'} {currencyA?.symbol}\r\n              </Text>\r\n            </RowBetween>\r\n          </>\r\n        )}\r\n        <NewButton>\r\n        <Button disabled={!(approval === ApprovalState.APPROVED || signatureData !== null)} onClick={onRemove}>\r\n          {TranslateString(1136, 'Confirm')}\r\n        </Button>\r\n        </NewButton>\r\n      </>\r\n    )\r\n  }\r\n\r\n  const pendingText = `Removing ${parsedAmounts[Field.CURRENCY_A]?.toSignificant(6)} ${\r\n    currencyA?.symbol\r\n  } and ${parsedAmounts[Field.CURRENCY_B]?.toSignificant(6)} ${currencyB?.symbol}`\r\n\r\n  const liquidityPercentChangeCallback = useCallback(\r\n    (value: number) => {\r\n      onUserInput(Field.LIQUIDITY_PERCENT, value.toString())\r\n    },\r\n    [onUserInput]\r\n  )\r\n\r\n  const oneCurrencyIsETH = currencyA === ETHER || currencyB === ETHER\r\n  const oneCurrencyIsWETH = Boolean(\r\n    chainId &&\r\n      ((currencyA && currencyEquals(WETH[chainId], currencyA)) ||\r\n        (currencyB && currencyEquals(WETH[chainId], currencyB)))\r\n  )\r\n\r\n  const handleSelectCurrencyA = useCallback(\r\n    (currency: Currency) => {\r\n      if (currencyIdB && currencyId(currency) === currencyIdB) {\r\n        history.push(`/remove/${currencyId(currency)}/${currencyIdA}`)\r\n      } else {\r\n        history.push(`/remove/${currencyId(currency)}/${currencyIdB}`)\r\n      }\r\n    },\r\n    [currencyIdA, currencyIdB, history]\r\n  )\r\n  const handleSelectCurrencyB = useCallback(\r\n    (currency: Currency) => {\r\n      if (currencyIdA && currencyId(currency) === currencyIdA) {\r\n        history.push(`/remove/${currencyIdB}/${currencyId(currency)}`)\r\n      } else {\r\n        history.push(`/remove/${currencyIdA}/${currencyId(currency)}`)\r\n      }\r\n    },\r\n    [currencyIdA, currencyIdB, history]\r\n  )\r\n\r\n  const handleDismissConfirmation = useCallback(() => {\r\n    setShowConfirm(false)\r\n    setSignatureData(null) // important that we clear signature data to avoid bad sigs\r\n    // if there was a tx hash, we want to clear the input\r\n    if (txHash) {\r\n      onUserInput(Field.LIQUIDITY_PERCENT, '0')\r\n    }\r\n    setTxHash('')\r\n  }, [onUserInput, txHash])\r\n\r\n  const [innerLiquidityPercentage, setInnerLiquidityPercentage] = useDebouncedChangeHandler(\r\n    Number.parseInt(parsedAmounts[Field.LIQUIDITY_PERCENT].toFixed(0)),\r\n    liquidityPercentChangeCallback\r\n  )\r\n\r\n  return (\r\n    <Container>\r\n      <AppBody>\r\n        <AddRemoveTabs adding={false} />\r\n        <Wrapper id=\"remove-page\">\r\n          <TransactionConfirmationModal\r\n            isOpen={showConfirm}\r\n            onDismiss={handleDismissConfirmation}\r\n            attemptingTxn={attemptingTxn}\r\n            hash={txHash || ''}\r\n            content={() => (\r\n              <ConfirmationModalContent\r\n                title={TranslateString(1156, 'You will receive')}\r\n                onDismiss={handleDismissConfirmation}\r\n                topContent={modalHeader}\r\n                bottomContent={modalBottom}\r\n              />\r\n            )}\r\n            pendingText={pendingText}\r\n          />\r\n          <AutoColumn gap=\"md\">\r\n            <Body>\r\n              <OutlineCard>\r\n                <AutoColumn>\r\n                  <RowBetween>\r\n                    <Text>Amount</Text>\r\n                    <ClickableText\r\n                      onClick={() => {\r\n                        setShowDetailed(!showDetailed)\r\n                      }}\r\n                    >\r\n                      {showDetailed ? TranslateString(1184, 'Simple') : TranslateString(1186, 'Detailed')}\r\n                    </ClickableText>\r\n                  </RowBetween>\r\n                  <Flex justifyContent=\"start\">\r\n                    <Text fontSize=\"64px\">{formattedAmounts[Field.LIQUIDITY_PERCENT]}%</Text>\r\n                  </Flex>\r\n                  {!showDetailed && (\r\n                    <>\r\n                      <Flex mb=\"8px\">\r\n                        <Slider value={innerLiquidityPercentage} onChange={setInnerLiquidityPercentage} />\r\n                      </Flex>\r\n                      <Flex justifyContent=\"space-around\">\r\n                        <NewButton>\r\n                        <Button\r\n                          variant=\"tertiary\"\r\n                          scale=\"sm\"\r\n                          onClick={() => onUserInput(Field.LIQUIDITY_PERCENT, '25')}\r\n                        >\r\n                          25%\r\n                        </Button>\r\n                        </NewButton>\r\n                        <NewButton>\r\n                        <Button\r\n                          variant=\"tertiary\"\r\n                          scale=\"sm\"\r\n                          onClick={() => onUserInput(Field.LIQUIDITY_PERCENT, '50')}\r\n                        >\r\n                          50%\r\n                        </Button>\r\n                        </NewButton>\r\n                        <NewButton>\r\n                        <Button\r\n                          variant=\"tertiary\"\r\n                          scale=\"sm\"\r\n                          onClick={() => onUserInput(Field.LIQUIDITY_PERCENT, '75')}\r\n                        >\r\n                          75%\r\n                        </Button>\r\n                        </NewButton>\r\n                        <NewButton>\r\n                        <Button\r\n                          variant=\"tertiary\"\r\n                          scale=\"sm\"\r\n                          onClick={() => onUserInput(Field.LIQUIDITY_PERCENT, '100')}\r\n                        >\r\n                          {TranslateString(166, 'Max')}\r\n                        </Button>\r\n                        </NewButton>\r\n                      </Flex>\r\n                    </>\r\n                  )}\r\n                </AutoColumn>\r\n              </OutlineCard>\r\n            </Body>\r\n            {!showDetailed && (\r\n              <>\r\n                <ColumnCenter>\r\n                  <ArrowDown size=\"16\" color={theme.colors.textSubtle} />\r\n                </ColumnCenter>\r\n                <Body>\r\n                  <OutlineCard>\r\n                    <AutoColumn gap=\"10px\">\r\n                      <RowBetween>\r\n                        <Text fontSize=\"24px\">{formattedAmounts[Field.CURRENCY_A] || '-'}</Text>\r\n                        <RowFixed>\r\n                          <CurrencyLogo currency={currencyA} style={{ marginRight: '12px' }} />\r\n                          <Text fontSize=\"24px\" id=\"remove-liquidity-tokena-symbol\">\r\n                            {currencyA?.symbol}\r\n                          </Text>\r\n                        </RowFixed>\r\n                      </RowBetween>\r\n                      <RowBetween>\r\n                        <Text fontSize=\"24px\">{formattedAmounts[Field.CURRENCY_B] || '-'}</Text>\r\n                        <RowFixed>\r\n                          <CurrencyLogo currency={currencyB} style={{ marginRight: '12px' }} />\r\n                          <Text fontSize=\"24px\" id=\"remove-liquidity-tokenb-symbol\">\r\n                            {currencyB?.symbol}\r\n                          </Text>\r\n                        </RowFixed>\r\n                      </RowBetween>\r\n                      {chainId && (oneCurrencyIsWETH || oneCurrencyIsETH) ? (\r\n                        <RowBetween style={{ justifyContent: 'flex-end' }}>\r\n                          {oneCurrencyIsETH ? (\r\n                            <StyledInternalLink\r\n                              to={`/remove/${currencyA === ETHER ? WETH[chainId].address : currencyIdA}/${\r\n                                currencyB === ETHER ? WETH[chainId].address : currencyIdB\r\n                              }`}\r\n                            >\r\n                              {TranslateString(1188, 'Receive WPI')}\r\n                            </StyledInternalLink>\r\n                          ) : oneCurrencyIsWETH ? (\r\n                            <StyledInternalLink\r\n                              to={`/remove/${\r\n                                currencyA && currencyEquals(currencyA, WETH[chainId]) ? 'PI' : currencyIdA\r\n                              }/${currencyB && currencyEquals(currencyB, WETH[chainId]) ? 'PI' : currencyIdB}`}\r\n                            >\r\n                              {TranslateString(1190, 'Receive PI')}\r\n                            </StyledInternalLink>\r\n                          ) : null}\r\n                        </RowBetween>\r\n                      ) : null}\r\n                    </AutoColumn>\r\n                  </OutlineCard>\r\n                </Body>\r\n              </>\r\n            )}\r\n            <Body style={{ paddingBottom: '24px' }}>\r\n              {showDetailed && (\r\n                <>\r\n                  <CurrencyInputPanel\r\n                    value={formattedAmounts[Field.LIQUIDITY]}\r\n                    onUserInput={onLiquidityInput}\r\n                    onMax={() => {\r\n                      onUserInput(Field.LIQUIDITY_PERCENT, '100')\r\n                    }}\r\n                    showMaxButton={!atMaxAmount}\r\n                    disableCurrencySelect\r\n                    currency={pair?.liquidityToken}\r\n                    pair={pair}\r\n                    id=\"liquidity-amount\"\r\n                  />\r\n                  <ColumnCenter>\r\n                    <ArrowDown size=\"16\" color={theme.colors.textSubtle} />\r\n                  </ColumnCenter>\r\n                  <CurrencyInputPanel\r\n                    hideBalance\r\n                    value={formattedAmounts[Field.CURRENCY_A]}\r\n                    onUserInput={onCurrencyAInput}\r\n                    onMax={() => onUserInput(Field.LIQUIDITY_PERCENT, '100')}\r\n                    showMaxButton={!atMaxAmount}\r\n                    currency={currencyA}\r\n                    label=\"Output\"\r\n                    onCurrencySelect={handleSelectCurrencyA}\r\n                    id=\"remove-liquidity-tokena\"\r\n                  />\r\n                  <ColumnCenter>\r\n                    <Plus size=\"16\" color={theme.colors.textSubtle} />\r\n                  </ColumnCenter>\r\n                  <CurrencyInputPanel\r\n                    hideBalance\r\n                    value={formattedAmounts[Field.CURRENCY_B]}\r\n                    onUserInput={onCurrencyBInput}\r\n                    onMax={() => onUserInput(Field.LIQUIDITY_PERCENT, '100')}\r\n                    showMaxButton={!atMaxAmount}\r\n                    currency={currencyB}\r\n                    label=\"Output\"\r\n                    onCurrencySelect={handleSelectCurrencyB}\r\n                    id=\"remove-liquidity-tokenb\"\r\n                  />\r\n                </>\r\n              )}\r\n              {pair && (\r\n                <div style={{ padding: '24px' }}>\r\n                  <Flex justifyContent=\"space-between\" mb=\"8px\">\r\n                    Price:\r\n                    <div>\r\n                      1 {currencyA?.symbol} = {tokenA ? pair.priceOf(tokenA).toSignificant(6) : '-'} {currencyB?.symbol}\r\n                    </div>\r\n                  </Flex>\r\n                  <Flex justifyContent=\"space-between\">\r\n                    <div />\r\n                    <div>\r\n                      1 {currencyB?.symbol} = {tokenB ? pair.priceOf(tokenB).toSignificant(6) : '-'} {currencyA?.symbol}\r\n                    </div>\r\n                  </Flex>\r\n                </div>\r\n              )}\r\n              <div style={{ position: 'relative' }}>\r\n                {!account ? (\r\n                  <ConnectWalletButton width=\"100%\" />\r\n                ) : (\r\n                  <RowBetween>\r\n                    <NewButton>\r\n                    <Button\r\n                      onClick={approveCallback}\r\n                      variant={approval === ApprovalState.APPROVED || signatureData !== null ? 'success' : 'primary'}\r\n                      disabled={approval !== ApprovalState.NOT_APPROVED || signatureData !== null}\r\n                      mr=\"8px\"\r\n                    >\r\n                      {approval === ApprovalState.PENDING ? (\r\n                        <Dots>Approving</Dots>\r\n                      ) : approval === ApprovalState.APPROVED || signatureData !== null ? (\r\n                        'Approved'\r\n                      ) : (\r\n                        'Approve'\r\n                      )}\r\n                    </Button>\r\n                    </NewButton>\r\n                    <NewButton>\r\n                    <Button\r\n                      onClick={() => {\r\n                        setShowConfirm(true)\r\n                      }}\r\n                      disabled={!isValid || (signatureData === null && approval !== ApprovalState.APPROVED)}\r\n                      variant={\r\n                        !isValid && !!parsedAmounts[Field.CURRENCY_A] && !!parsedAmounts[Field.CURRENCY_B]\r\n                          ? 'danger'\r\n                          : 'primary'\r\n                      }\r\n                    >\r\n                      {error || 'Remove'}\r\n                    </Button>\r\n                    </NewButton>\r\n                  </RowBetween>\r\n                )}\r\n              </div>\r\n            </Body>\r\n          </AutoColumn>\r\n        </Wrapper>\r\n      </AppBody>\r\n\r\n      {pair ? (\r\n        <AutoColumn style={{ width: '100%', maxWidth: '720px', marginTop: '1rem' }}>\r\n          <MinimalPositionCard showUnwrapped={oneCurrencyIsWETH} pair={pair} />\r\n        </AutoColumn>\r\n      ) : null}\r\n    </Container>\r\n  )\r\n}\r\n","D:\\Code\\swap-interface-v1\\src\\pages\\Swap\\index.tsx",["789","790","791","792","793","794","795","796"],"import { CurrencyAmount, JSBI, Token, Trade } from '@paiswap/sdk'\r\nimport React, { useCallback, useContext, useEffect, useMemo, useState, useRef } from 'react'\r\nimport { ArrowDown } from 'react-feather'\r\nimport { CardBody, ArrowDownIcon, Button, IconButton, Text, useModal, Flex } from '@pancakeswap-libs/uikit'\r\nimport styled, { ThemeContext } from 'styled-components'\r\nimport { Link } from 'react-router-dom'\r\nimport AddressInputPanel from 'components/AddressInputPanel'\r\nimport Card, { GreyCard } from 'components/Card'\r\nimport { AutoColumn } from 'components/Column'\r\nimport ConfirmSwapModal from 'components/swap/ConfirmSwapModal'\r\nimport CurrencyInputPanel from 'components/CurrencyInputPanel'\r\nimport CardNav from 'components/CardNav'\r\nimport { AutoRow, RowBetween } from 'components/Row'\r\nimport AdvancedSwapDetailsDropdown from 'components/swap/AdvancedSwapDetailsDropdown'\r\nimport confirmPriceImpactWithoutFee from 'components/swap/confirmPriceImpactWithoutFee'\r\nimport { ArrowWrapper, BottomGrouping, SwapCallbackError, Wrapper } from 'components/swap/styleds'\r\nimport TradePrice from 'components/swap/TradePrice'\r\nimport TokenWarningModal from 'components/TokenWarningModal'\r\nimport SyrupWarningModal from 'components/SyrupWarningModal'\r\nimport SafeMoonWarningModal from 'components/SafeMoonWarningModal'\r\nimport ProgressSteps from 'components/ProgressSteps'\r\nimport Container from 'components/Container'\r\n\r\nimport { INITIAL_ALLOWED_SLIPPAGE } from 'constants/index'\r\nimport { useActiveWeb3React } from 'hooks'\r\nimport { useCurrency } from 'hooks/Tokens'\r\nimport { ApprovalState, useApproveCallbackFromTrade } from 'hooks/useApproveCallback'\r\nimport { useSwapCallback } from 'hooks/useSwapCallback'\r\nimport useWrapCallback, { WrapType } from 'hooks/useWrapCallback'\r\nimport { Field } from 'state/swap/actions'\r\nimport { useDefaultsFromURLSearch, useDerivedSwapInfo, useSwapActionHandlers, useSwapState } from 'state/swap/hooks'\r\nimport { useExpertModeManager, useUserDeadline, useUserSlippageTolerance } from 'state/user/hooks'\r\nimport { LinkStyledButton } from 'components/Shared'\r\nimport { maxAmountSpend } from 'utils/maxAmountSpend'\r\nimport { computeTradePriceBreakdown, warningSeverity } from 'utils/prices'\r\nimport Loader from 'components/Loader'\r\nimport useI18n from 'hooks/useI18n'\r\nimport PageHeader from 'components/PageHeader'\r\nimport ConnectWalletButton from 'components/ConnectWalletButton'\r\nimport V2ExchangeRedirectModal from 'components/V2ExchangeRedirectModal'\r\nimport SettingsModal from 'components/PageHeader/SettingsModal'\r\nimport AppBody from '../AppBody'\r\nimport './index.scss'\r\n\r\n// const StyledLink = styled(Link)`\r\n//   display: inline;\r\n//   color: ${({ theme }) => theme.colors.failure};\r\n// `\r\n\r\nconst Swap = () => {\r\n  const loadedUrlParams = useDefaultsFromURLSearch()\r\n  const TranslateString = useI18n()\r\n  const [modalCountdownSecondsRemaining, setModalCountdownSecondsRemaining] = useState(5)\r\n  const [disableSwap, setDisableSwap] = useState(false)\r\n  const [hasPoppedModal, setHasPoppedModal] = useState(false)\r\n  const [interruptRedirectCountdown, setInterruptRedirectCountdown] = useState(false)\r\n  const [onPresentV2ExchangeRedirectModal] = useModal(\r\n    <V2ExchangeRedirectModal handleCloseModal={() => setInterruptRedirectCountdown(true)} />\r\n  )\r\n  const onPresentV2ExchangeRedirectModalRef = useRef(onPresentV2ExchangeRedirectModal)\r\n  // token warning stuff\r\n  const [loadedInputCurrency, loadedOutputCurrency] = [\r\n    useCurrency(loadedUrlParams?.inputCurrencyId),\r\n    useCurrency(loadedUrlParams?.outputCurrencyId),\r\n  ]\r\n  const [dismissTokenWarning, setDismissTokenWarning] = useState<boolean>(false)\r\n  const [transactionWarning, setTransactionWarning] = useState<{\r\n    selectedToken: string | null\r\n    purchaseType: string | null\r\n  }>({\r\n    selectedToken: null,\r\n    purchaseType: null,\r\n  })\r\n  const urlLoadedTokens: Token[] = useMemo(\r\n    () => [loadedInputCurrency, loadedOutputCurrency]?.filter((c): c is Token => c instanceof Token) ?? [],\r\n    [loadedInputCurrency, loadedOutputCurrency]\r\n  )\r\n  const handleConfirmTokenWarning = useCallback(() => {\r\n    setDismissTokenWarning(true)\r\n  }, [])\r\n\r\n  const handleConfirmWarning = () => {\r\n    setTransactionWarning({\r\n      selectedToken: null,\r\n      purchaseType: null,\r\n    })\r\n  }\r\n\r\n  const { account } = useActiveWeb3React()\r\n  const theme = useContext(ThemeContext)\r\n\r\n  const [isExpertMode] = useExpertModeManager()\r\n\r\n  // get custom setting values for user\r\n  const [deadline] = useUserDeadline()\r\n  const [allowedSlippage] = useUserSlippageTolerance()\r\n\r\n  // swap state\r\n  const { independentField, typedValue, recipient } = useSwapState()\r\n  const { v2Trade, currencyBalances, parsedAmount, currencies, inputError: swapInputError } = useDerivedSwapInfo()\r\n  const { wrapType, execute: onWrap, inputError: wrapInputError } = useWrapCallback(\r\n    currencies[Field.INPUT],\r\n    currencies[Field.OUTPUT],\r\n    typedValue\r\n  )\r\n  const showWrap: boolean = wrapType !== WrapType.NOT_APPLICABLE\r\n  const trade = showWrap ? undefined : v2Trade\r\n  const [onPresentSettings] = useModal(<SettingsModal translateString={TranslateString} />)\r\n\r\n  // Manage disabled trading pairs that should redirect users to V2\r\n  useEffect(() => {\r\n    const disabledSwaps = [\r\n      'BNB',\r\n      'BUSD',\r\n      'USDT',\r\n      'USDC',\r\n      'CAKE',\r\n      'BUNNY',\r\n      'ETH',\r\n      'BTCB',\r\n      'AUTO',\r\n      'XVS',\r\n      'SAFEMOON',\r\n      'DAI',\r\n      'ADA',\r\n      'DOT',\r\n      'ElonGate',\r\n      'TWT',\r\n      'ALPACA',\r\n      'IOTX',\r\n      'BAND',\r\n      'ATOM',\r\n      'EOS',\r\n      'SFP',\r\n      'SWINGBY',\r\n    ]\r\n    const inputCurrencySymbol = currencies[Field.INPUT]?.symbol || ''\r\n    const outputCurrencySymbol = currencies[Field.OUTPUT]?.symbol || ''\r\n    const doesInputMatch = disabledSwaps.includes(inputCurrencySymbol)\r\n    const doesOutputMatch = disabledSwaps.includes(outputCurrencySymbol)\r\n\r\n    if (doesInputMatch && doesOutputMatch) {\r\n      // Prevent infinite re-render of modal with this condition\r\n      if (!hasPoppedModal) {\r\n        setHasPoppedModal(true)\r\n        onPresentV2ExchangeRedirectModalRef.current()\r\n      }\r\n\r\n      // Controls the swap buttons being disabled & renders a message\r\n      setDisableSwap(true)\r\n\r\n      const tick = () => {\r\n        setModalCountdownSecondsRemaining((prevSeconds) => prevSeconds - 1)\r\n      }\r\n      const timerInterval = setInterval(() => tick(), 1000)\r\n\r\n      if (interruptRedirectCountdown) {\r\n        // Reset timer if countdown is interrupted\r\n        clearInterval(timerInterval)\r\n        setModalCountdownSecondsRemaining(5)\r\n      }\r\n\r\n      if (modalCountdownSecondsRemaining <= 0) {\r\n        window.location.href = 'https://exchange.pancakeswap.finance/#/swap'\r\n      }\r\n\r\n      return () => {\r\n        clearInterval(timerInterval)\r\n      }\r\n    }\r\n\r\n    // Unset disableSwap state if the swap inputs & outputs dont match disabledSwaps\r\n    setDisableSwap(false)\r\n    return undefined\r\n  }, [\r\n    currencies,\r\n    hasPoppedModal,\r\n    modalCountdownSecondsRemaining,\r\n    onPresentV2ExchangeRedirectModalRef,\r\n    interruptRedirectCountdown,\r\n  ])\r\n\r\n  const parsedAmounts = showWrap\r\n    ? {\r\n        [Field.INPUT]: parsedAmount,\r\n        [Field.OUTPUT]: parsedAmount,\r\n      }\r\n    : {\r\n        [Field.INPUT]: independentField === Field.INPUT ? parsedAmount : trade?.inputAmount,\r\n        [Field.OUTPUT]: independentField === Field.OUTPUT ? parsedAmount : trade?.outputAmount,\r\n      }\r\n\r\n  const { onSwitchTokens, onCurrencySelection, onUserInput, onChangeRecipient } = useSwapActionHandlers()\r\n  const isValid = !swapInputError\r\n  const dependentField: Field = independentField === Field.INPUT ? Field.OUTPUT : Field.INPUT\r\n\r\n  const handleTypeInput = useCallback(\r\n    (value: string) => {\r\n      onUserInput(Field.INPUT, value)\r\n    },\r\n    [onUserInput]\r\n  )\r\n  const handleTypeOutput = useCallback(\r\n    (value: string) => {\r\n      onUserInput(Field.OUTPUT, value)\r\n    },\r\n    [onUserInput]\r\n  )\r\n\r\n  // modal and loading\r\n  const [{ showConfirm, tradeToConfirm, swapErrorMessage, attemptingTxn, txHash }, setSwapState] = useState<{\r\n    showConfirm: boolean\r\n    tradeToConfirm: Trade | undefined\r\n    attemptingTxn: boolean\r\n    swapErrorMessage: string | undefined\r\n    txHash: string | undefined\r\n  }>({\r\n    showConfirm: false,\r\n    tradeToConfirm: undefined,\r\n    attemptingTxn: false,\r\n    swapErrorMessage: undefined,\r\n    txHash: undefined,\r\n  })\r\n\r\n  const formattedAmounts = {\r\n    [independentField]: typedValue,\r\n    [dependentField]: showWrap\r\n      ? parsedAmounts[independentField]?.toExact() ?? ''\r\n      : parsedAmounts[dependentField]?.toSignificant(6) ?? '',\r\n  }\r\n\r\n  const route = trade?.route\r\n  const userHasSpecifiedInputOutput = Boolean(\r\n    currencies[Field.INPUT] && currencies[Field.OUTPUT] && parsedAmounts[independentField]?.greaterThan(JSBI.BigInt(0))\r\n  )\r\n  const noRoute = !route\r\n\r\n  // check whether the user has approved the router on the input token\r\n  const [approval, approveCallback] = useApproveCallbackFromTrade(trade, allowedSlippage)\r\n\r\n  // check if user has gone through approval process, used to show two step buttons, reset on token change\r\n  const [approvalSubmitted, setApprovalSubmitted] = useState<boolean>(false)\r\n\r\n  // mark when a user has submitted an approval, reset onTokenSelection for input field\r\n  useEffect(() => {\r\n    if (approval === ApprovalState.PENDING) {\r\n      setApprovalSubmitted(true)\r\n    }\r\n  }, [approval, approvalSubmitted])\r\n\r\n  const maxAmountInput: CurrencyAmount | undefined = maxAmountSpend(currencyBalances[Field.INPUT])\r\n  const atMaxAmountInput = Boolean(maxAmountInput && parsedAmounts[Field.INPUT]?.equalTo(maxAmountInput))\r\n\r\n  // the callback to execute the swap\r\n  const { callback: swapCallback, error: swapCallbackError } = useSwapCallback(\r\n    trade,\r\n    allowedSlippage,\r\n    deadline,\r\n    recipient\r\n  )\r\n\r\n  const { priceImpactWithoutFee } = computeTradePriceBreakdown(trade)\r\n\r\n  const handleSwap = useCallback(() => {\r\n    if (priceImpactWithoutFee && !confirmPriceImpactWithoutFee(priceImpactWithoutFee)) {\r\n      return\r\n    }\r\n    if (!swapCallback) {\r\n      return\r\n    }\r\n    setSwapState((prevState) => ({ ...prevState, attemptingTxn: true, swapErrorMessage: undefined, txHash: undefined }))\r\n    swapCallback()\r\n      .then((hash) => {\r\n        setSwapState((prevState) => ({\r\n          ...prevState,\r\n          attemptingTxn: false,\r\n          swapErrorMessage: undefined,\r\n          txHash: hash,\r\n        }))\r\n      })\r\n      .catch((error) => {\r\n        setSwapState((prevState) => ({\r\n          ...prevState,\r\n          attemptingTxn: false,\r\n          swapErrorMessage: error.message,\r\n          txHash: undefined,\r\n        }))\r\n      })\r\n  }, [priceImpactWithoutFee, swapCallback, setSwapState])\r\n\r\n  // errors\r\n  const [showInverted, setShowInverted] = useState<boolean>(false)\r\n\r\n  // warnings on slippage\r\n  const priceImpactSeverity = warningSeverity(priceImpactWithoutFee)\r\n\r\n  // show approve flow when: no error on inputs, not approved or pending, or approved in current session\r\n  // never show if price impact is above threshold in non expert mode\r\n  const showApproveFlow =\r\n    !swapInputError &&\r\n    (approval === ApprovalState.NOT_APPROVED ||\r\n      approval === ApprovalState.PENDING ||\r\n      (approvalSubmitted && approval === ApprovalState.APPROVED)) &&\r\n    !(priceImpactSeverity > 3 && !isExpertMode)\r\n\r\n  const handleConfirmDismiss = useCallback(() => {\r\n    setSwapState((prevState) => ({ ...prevState, showConfirm: false }))\r\n\r\n    // if there was a tx hash, we want to clear the input\r\n    if (txHash) {\r\n      onUserInput(Field.INPUT, '')\r\n    }\r\n  }, [onUserInput, txHash, setSwapState])\r\n\r\n  const handleAcceptChanges = useCallback(() => {\r\n    setSwapState((prevState) => ({ ...prevState, tradeToConfirm: trade }))\r\n  }, [trade])\r\n\r\n  // This will check to see if the user has selected Syrup or SafeMoon to either buy or sell.\r\n  // If so, they will be alerted with a warning message.\r\n  const checkForWarning = useCallback(\r\n    (selected: string, purchaseType: string) => {\r\n      if (['SYRUP', 'SAFEMOON'].includes(selected)) {\r\n        setTransactionWarning({\r\n          selectedToken: selected,\r\n          purchaseType,\r\n        })\r\n      }\r\n    },\r\n    [setTransactionWarning]\r\n  )\r\n\r\n  const handleInputSelect = useCallback(\r\n    (inputCurrency) => {\r\n      setHasPoppedModal(false)\r\n      setInterruptRedirectCountdown(false)\r\n      setApprovalSubmitted(false) // reset 2 step UI for approvals\r\n      onCurrencySelection(Field.INPUT, inputCurrency)\r\n      if (inputCurrency.symbol === 'SYRUP') {\r\n        checkForWarning(inputCurrency.symbol, 'Selling')\r\n      }\r\n      if (inputCurrency.symbol === 'SAFEMOON') {\r\n        checkForWarning(inputCurrency.symbol, 'Selling')\r\n      }\r\n    },\r\n    [onCurrencySelection, setApprovalSubmitted, checkForWarning]\r\n  )\r\n\r\n  const handleMaxInput = useCallback(() => {\r\n    if (maxAmountInput) {\r\n      onUserInput(Field.INPUT, maxAmountInput.toExact())\r\n    }\r\n  }, [maxAmountInput, onUserInput])\r\n\r\n  const handleOutputSelect = useCallback(\r\n    (outputCurrency) => {\r\n      setHasPoppedModal(false)\r\n      setInterruptRedirectCountdown(false)\r\n      onCurrencySelection(Field.OUTPUT, outputCurrency)\r\n      if (outputCurrency.symbol === 'SYRUP') {\r\n        checkForWarning(outputCurrency.symbol, 'Buying')\r\n      }\r\n      if (outputCurrency.symbol === 'SAFEMOON') {\r\n        checkForWarning(outputCurrency.symbol, 'Buying')\r\n      }\r\n    },\r\n    [onCurrencySelection, checkForWarning]\r\n  )\r\n\r\n  return (\r\n    <Container>\r\n      <TokenWarningModal\r\n        isOpen={urlLoadedTokens.length > 0 && !dismissTokenWarning}\r\n        tokens={urlLoadedTokens}\r\n        onConfirm={handleConfirmTokenWarning}\r\n      />\r\n      <SyrupWarningModal\r\n        isOpen={transactionWarning.selectedToken === 'SYRUP'}\r\n        transactionType={transactionWarning.purchaseType}\r\n        onConfirm={handleConfirmWarning}\r\n      />\r\n      <SafeMoonWarningModal isOpen={transactionWarning.selectedToken === 'SAFEMOON'} onConfirm={handleConfirmWarning} />\r\n      {/* <CardNav /> */}\r\n      <AppBody>\r\n        <Wrapper id=\"swap-page\">\r\n          <ConfirmSwapModal\r\n            isOpen={showConfirm}\r\n            trade={trade}\r\n            originalTrade={tradeToConfirm}\r\n            onAcceptChanges={handleAcceptChanges}\r\n            attemptingTxn={attemptingTxn}\r\n            txHash={txHash}\r\n            recipient={recipient}\r\n            allowedSlippage={allowedSlippage}\r\n            onConfirm={handleSwap}\r\n            swapErrorMessage={swapErrorMessage}\r\n            onDismiss={handleConfirmDismiss}\r\n          />\r\n          <div className=\"page-header\">\r\n            {/* <PageHeader\r\n              title={TranslateString(8, 'Exchange')}\r\n              description={TranslateString(1192, 'Trade tokens in an instant')}\r\n            /> */}\r\n            <div className=\"tab\">\r\n              <Link to=\"/swap\" className=\"tab-item active\">\r\n                Swap\r\n              </Link>\r\n              <Link to=\"/pool\" className=\"tab-item\">\r\n                Liquidity\r\n              </Link>\r\n              <div className=\"settings\" onClick={onPresentSettings} aria-hidden=\"true\">\r\n                <img src=\"https://lanhu.oss-cn-beijing.aliyuncs.com/SketchPngf04ec6ad4674a213f4e083ab0501e6bb274beaf7a8c19ecd7edf06b874e05a1a\" referrerPolicy=\"no-referrer\" alt=\"\" />\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <CardBody>\r\n            <AutoColumn gap=\"md\">\r\n              <div className=\"input-wrap\">\r\n              <CurrencyInputPanel\r\n                label={\r\n                  independentField === Field.OUTPUT && !showWrap && trade\r\n                    ? TranslateString(194, 'From (estimated)')\r\n                    : TranslateString(76, 'From')\r\n                }\r\n                value={formattedAmounts[Field.INPUT]}\r\n                showMaxButton={!atMaxAmountInput}\r\n                currency={currencies[Field.INPUT]}\r\n                onUserInput={handleTypeInput}\r\n                onMax={handleMaxInput}\r\n                onCurrencySelect={handleInputSelect}\r\n                otherCurrency={currencies[Field.OUTPUT]}\r\n                id=\"swap-currency-input\"\r\n              />\r\n              </div>\r\n              <AutoColumn justify=\"space-between\">\r\n                <AutoRow justify={isExpertMode ? 'space-between' : 'center'} style={{ padding: '0 1rem' }}>\r\n                  <ArrowWrapper clickable>\r\n                    <IconButton\r\n                      variant=\"tertiary\"\r\n                      onClick={() => {\r\n                        setApprovalSubmitted(false) // reset 2 step UI for approvals\r\n                        onSwitchTokens()\r\n                      }}\r\n                      style={{ borderRadius: '50%', background: 'transparent' }}\r\n                      scale=\"sm\"\r\n                    >\r\n                      {/* <ArrowDownIcon color=\"primary\" width=\"24px\" /> */}\r\n                      <img src=\"https://lanhu.oss-cn-beijing.aliyuncs.com/SketchPngf5c2c440d93fb9abf6a5c7413c2207262023660a5578b5764604bd4242e33a22\" referrerPolicy=\"no-referrer\" alt=\"\" />\r\n                    </IconButton>\r\n                  </ArrowWrapper>\r\n                  {recipient === null && !showWrap && isExpertMode ? (\r\n                    <LinkStyledButton id=\"add-recipient-button\" onClick={() => onChangeRecipient('')}>\r\n                      + Add a send (optional)\r\n                    </LinkStyledButton>\r\n                  ) : null}\r\n                </AutoRow>\r\n              </AutoColumn>\r\n              <div className=\"input-wrap\">\r\n              <CurrencyInputPanel\r\n                value={formattedAmounts[Field.OUTPUT]}\r\n                onUserInput={handleTypeOutput}\r\n                label={\r\n                  independentField === Field.INPUT && !showWrap && trade\r\n                    ? TranslateString(196, 'To (estimated)')\r\n                    : TranslateString(80, 'To')\r\n                }\r\n                showMaxButton={false}\r\n                currency={currencies[Field.OUTPUT]}\r\n                onCurrencySelect={handleOutputSelect}\r\n                otherCurrency={currencies[Field.INPUT]}\r\n                id=\"swap-currency-output\"\r\n              />\r\n              </div>\r\n\r\n              {recipient !== null && !showWrap ? (\r\n                <>\r\n                  <AutoRow justify=\"space-between\" style={{ padding: '0 1rem' }}>\r\n                    <ArrowWrapper clickable={false}>\r\n                      <ArrowDown size=\"16\" color={theme.colors.textSubtle} />\r\n                    </ArrowWrapper>\r\n                    <LinkStyledButton id=\"remove-recipient-button\" onClick={() => onChangeRecipient(null)}>\r\n                      - Remove send\r\n                    </LinkStyledButton>\r\n                  </AutoRow>\r\n                  <AddressInputPanel id=\"recipient\" value={recipient} onChange={onChangeRecipient} />\r\n                </>\r\n              ) : null}\r\n\r\n              {showWrap ? null : (\r\n                <Card padding=\".25rem .75rem 0 .75rem\" borderRadius=\"20px\">\r\n                  <AutoColumn gap=\"4px\">\r\n                    {/* {Boolean(trade) && (\r\n                      <RowBetween align=\"center\">\r\n                        <Text fontSize=\"14px\">{TranslateString(1182, 'Price')}</Text>\r\n                        <TradePrice\r\n                          price={trade?.executionPrice}\r\n                          showInverted={showInverted}\r\n                          setShowInverted={setShowInverted}\r\n                        />\r\n                      </RowBetween>\r\n                    )} */}\r\n                    {/* {allowedSlippage !== INITIAL_ALLOWED_SLIPPAGE && (\r\n                      <RowBetween align=\"center\">\r\n                        <Text fontSize=\"14px\">{TranslateString(88, 'Slippage Tolerance')}</Text>\r\n                        <Text fontSize=\"14px\">{allowedSlippage / 100}%</Text>\r\n                      </RowBetween>\r\n                    )} */}\r\n                  </AutoColumn>\r\n                </Card>\r\n              )}\r\n            </AutoColumn>\r\n            <BottomGrouping>\r\n              {disableSwap && (\r\n                <Flex alignItems=\"center\" justifyContent=\"center\" mb=\"1rem\">\r\n                  <Text color=\"failure\">\r\n                    Please use{' '}\r\n                    {/* <StyledLink external href=\"https://exchange.pancakeswap.finance\">\r\n                      PancakeSwap V2\r\n                    </StyledLink>{' '} */}\r\n                    to make this trade\r\n                  </Text>\r\n                </Flex>\r\n              )}\r\n              {!account ? (\r\n                <ConnectWalletButton width=\"100%\" />\r\n              ) : showWrap ? (\r\n                <Button disabled={Boolean(wrapInputError)} onClick={onWrap} width=\"100%\">\r\n                  {wrapInputError ??\r\n                    (wrapType === WrapType.WRAP ? 'Wrap' : wrapType === WrapType.UNWRAP ? 'Unwrap' : null)}\r\n                </Button>\r\n              ) : noRoute && userHasSpecifiedInputOutput ? (\r\n                <GreyCard style={{ textAlign: 'center' }}>\r\n                  <Text mb=\"4px\">{TranslateString(1194, 'Insufficient liquidity for this trade.')}</Text>\r\n                </GreyCard>\r\n              ) : showApproveFlow ? (\r\n                <RowBetween>\r\n                  <Button\r\n                    onClick={approveCallback}\r\n                    disabled={disableSwap || approval !== ApprovalState.NOT_APPROVED || approvalSubmitted}\r\n                    style={{ width: '48%' }}\r\n                    variant={approval === ApprovalState.APPROVED ? 'success' : 'primary'}\r\n                  >\r\n                    {approval === ApprovalState.PENDING ? (\r\n                      <AutoRow gap=\"6px\" justify=\"center\">\r\n                        Approving <Loader stroke=\"white\" />\r\n                      </AutoRow>\r\n                    ) : approvalSubmitted && approval === ApprovalState.APPROVED ? (\r\n                      'Approved'\r\n                    ) : (\r\n                      `Approve ${currencies[Field.INPUT]?.symbol}`\r\n                    )}\r\n                  </Button>\r\n                  <Button\r\n                    onClick={() => {\r\n                      if (isExpertMode) {\r\n                        handleSwap()\r\n                      } else {\r\n                        setSwapState({\r\n                          tradeToConfirm: trade,\r\n                          attemptingTxn: false,\r\n                          swapErrorMessage: undefined,\r\n                          showConfirm: true,\r\n                          txHash: undefined,\r\n                        })\r\n                      }\r\n                    }}\r\n                    style={{ width: '48%' }}\r\n                    id=\"swap-button\"\r\n                    disabled={\r\n                      disableSwap ||\r\n                      !isValid ||\r\n                      approval !== ApprovalState.APPROVED ||\r\n                      (priceImpactSeverity > 3 && !isExpertMode)\r\n                    }\r\n                    variant={isValid && priceImpactSeverity > 2 ? 'danger' : 'primary'}\r\n                  >\r\n                    {priceImpactSeverity > 3 && !isExpertMode\r\n                      ? `Price Impact High`\r\n                      : `Swap${priceImpactSeverity > 2 ? ' Anyway' : ''}`}\r\n                  </Button>\r\n                </RowBetween>\r\n              ) : (\r\n                <Button\r\n                  onClick={() => {\r\n                    if (isExpertMode) {\r\n                      handleSwap()\r\n                    } else {\r\n                      setSwapState({\r\n                        tradeToConfirm: trade,\r\n                        attemptingTxn: false,\r\n                        swapErrorMessage: undefined,\r\n                        showConfirm: true,\r\n                        txHash: undefined,\r\n                      })\r\n                    }\r\n                  }}\r\n                  id=\"swap-button\"\r\n                  disabled={\r\n                    disableSwap || !isValid || (priceImpactSeverity > 3 && !isExpertMode) || !!swapCallbackError\r\n                  }\r\n                  variant={isValid && priceImpactSeverity > 2 && !swapCallbackError ? 'danger' : 'primary'}\r\n                  width=\"100%\"\r\n                >\r\n                  {swapInputError ||\r\n                    (priceImpactSeverity > 3 && !isExpertMode\r\n                      ? `Price Impact Too High`\r\n                      : `Swap${priceImpactSeverity > 2 ? ' Anyway' : ''}`)}\r\n                </Button>\r\n              )}\r\n              {showApproveFlow && <ProgressSteps steps={[approval === ApprovalState.APPROVED]} />}\r\n              {isExpertMode && swapErrorMessage ? <SwapCallbackError error={swapErrorMessage} /> : null}\r\n            </BottomGrouping>\r\n          </CardBody>\r\n        </Wrapper>\r\n      </AppBody>\r\n      <AdvancedSwapDetailsDropdown trade={trade} />\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Swap\r\n","D:\\Code\\swap-interface-v1\\src\\components\\Popups\\index.tsx",[],"D:\\Code\\swap-interface-v1\\src\\components\\Web3ReactManager\\index.tsx",[],"D:\\Code\\swap-interface-v1\\src\\pages\\Pool\\index.tsx",["797","798","799","800"],"import React, { useContext, useMemo } from 'react'\r\nimport styled, { ThemeContext } from 'styled-components'\r\nimport { Pair } from '@paiswap/sdk'\r\nimport { Button, CardBody, Text, useModal } from '@pancakeswap-libs/uikit'\r\nimport { Link } from 'react-router-dom'\r\nimport CardNav from 'components/CardNav'\r\nimport Question from 'components/QuestionHelper'\r\nimport FullPositionCard from 'components/PositionCard'\r\nimport { useTokenBalancesWithLoadingIndicator } from 'state/wallet/hooks'\r\nimport { StyledInternalLink } from 'components/Shared'\r\nimport { LightCard } from 'components/Card'\r\nimport { RowBetween } from 'components/Row'\r\nimport { AutoColumn } from 'components/Column'\r\nimport Container from 'components/Container'\r\n\r\nimport { useActiveWeb3React } from 'hooks'\r\nimport { usePairs } from 'data/Reserves'\r\nimport { toV2LiquidityToken, useTrackedTokenPairs } from 'state/user/hooks'\r\nimport { Dots, Wrapper } from 'components/swap/styleds'\r\nimport useI18n from 'hooks/useI18n'\r\nimport PageHeader from 'components/PageHeader'\r\nimport SettingsModal from 'components/PageHeader/SettingsModal'\r\nimport ConnectWalletButton from 'components/ConnectWalletButton'\r\nimport NewButton from 'components/NewButton'\r\nimport AppBody from '../AppBody'\r\nimport './index.scss'\r\n\r\nexport default function Pool() {\r\n  const theme = useContext(ThemeContext)\r\n  const { account } = useActiveWeb3React()\r\n  const TranslateString = useI18n()\r\n\r\n  // fetch the user's balances of all tracked V2 LP tokens\r\n  const trackedTokenPairs = useTrackedTokenPairs()\r\n  const tokenPairsWithLiquidityTokens = useMemo(\r\n    () => trackedTokenPairs.map((tokens) => ({ liquidityToken: toV2LiquidityToken(tokens), tokens })),\r\n    [trackedTokenPairs]\r\n  )\r\n  const liquidityTokens = useMemo(() => tokenPairsWithLiquidityTokens.map((tpwlt) => tpwlt.liquidityToken), [\r\n    tokenPairsWithLiquidityTokens,\r\n  ])\r\n  const [v2PairsBalances, fetchingV2PairBalances] = useTokenBalancesWithLoadingIndicator(\r\n    account ?? undefined,\r\n    liquidityTokens\r\n  )\r\n  const [onPresentSettings] = useModal(<SettingsModal translateString={TranslateString} />)\r\n\r\n  // fetch the reserves for all V2 pools in which the user has a balance\r\n  const liquidityTokensWithBalances = useMemo(\r\n    () =>\r\n      tokenPairsWithLiquidityTokens.filter(({ liquidityToken }) =>\r\n        v2PairsBalances[liquidityToken.address]?.greaterThan('0')\r\n      ),\r\n    [tokenPairsWithLiquidityTokens, v2PairsBalances]\r\n  )\r\n\r\n  const v2Pairs = usePairs(liquidityTokensWithBalances.map(({ tokens }) => tokens))\r\n  const v2IsLoading =\r\n    fetchingV2PairBalances || v2Pairs?.length < liquidityTokensWithBalances.length || v2Pairs?.some((V2Pair) => !V2Pair)\r\n\r\n  const allV2PairsWithLiquidity = v2Pairs.map(([, pair]) => pair).filter((v2Pair): v2Pair is Pair => Boolean(v2Pair))\r\n\r\n  return (\r\n    <Container>\r\n      {/* <CardNav activeIndex={1} /> */}\r\n      <AppBody>\r\n        <Wrapper id=\"pool-page\">\r\n        {/* <PageHeader\r\n          title={TranslateString(262, 'Liquidity')}\r\n          description={TranslateString(1168, 'Add liquidity to receive LP tokens')}\r\n        >\r\n          <Button id=\"join-pool-button\" as={Link} to=\"/add/PI\" mb=\"16px\">\r\n            {TranslateString(168, 'Add Liquidity')}\r\n          </Button>\r\n        </PageHeader> */}\r\n        <div className=\"page-header\">\r\n          <div className=\"tab\">\r\n            <Link to=\"/swap\" className=\"tab-item\">\r\n                Swap\r\n            </Link>\r\n            <Link to=\"/pool\" className=\"tab-item active\">\r\n                Liquidity\r\n            </Link>\r\n            <div className=\"settings\" onClick={onPresentSettings} aria-hidden=\"true\">\r\n              <img src=\"https://lanhu.oss-cn-beijing.aliyuncs.com/SketchPngf04ec6ad4674a213f4e083ab0501e6bb274beaf7a8c19ecd7edf06b874e05a1a\" referrerPolicy=\"no-referrer\" alt=\"\" />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <AutoColumn gap=\"lg\" justify=\"center\">\r\n          <CardBody style={{ width: '100%' }}>\r\n            <AutoColumn gap=\"12px\" style={{ width: '100%' }}>\r\n              <RowBetween padding=\"0 8px\">\r\n                <Text color={theme.colors.text}>{TranslateString(107, 'Your Liquidity')}</Text>\r\n                <Question\r\n                  text={TranslateString(\r\n                    1170,\r\n                    'When you add liquidity, you are given pool tokens that represent your share. If you don’t see a pool you joined in this list, try importing a pool below.'\r\n                  )}\r\n                />\r\n              </RowBetween>\r\n\r\n              {!account ? (\r\n                <LightCard padding=\"40px\">\r\n                  <Text color=\"textDisabled\" textAlign=\"center\">\r\n                    {TranslateString(156, 'Connect to a wallet to view your liquidity.')}\r\n                  </Text>\r\n                </LightCard>\r\n              ) : v2IsLoading ? (\r\n                <LightCard padding=\"40px\">\r\n                  <Text color=\"textDisabled\" textAlign=\"center\">\r\n                    <Dots>Loading</Dots>\r\n                  </Text>\r\n                </LightCard>\r\n              ) : allV2PairsWithLiquidity?.length > 0 ? (\r\n                <>\r\n                  {allV2PairsWithLiquidity.map((v2Pair) => (\r\n                    <FullPositionCard key={v2Pair.liquidityToken.address} pair={v2Pair} />\r\n                  ))}\r\n                </>\r\n              ) : (\r\n                <LightCard padding=\"40px\">\r\n                  <Text color=\"textDisabled\" textAlign=\"center\">\r\n                    {TranslateString(104, 'No liquidity found.')}\r\n                  </Text>\r\n                </LightCard>\r\n              )}\r\n\r\n            {!account ? (\r\n              <ConnectWalletButton width=\"100%\" />\r\n              ) : (\r\n                <NewButton>\r\n                <Button id=\"join-pool-button\" as={Link} to=\"/add/PI\" mb=\"16px\">\r\n                  {TranslateString(168, 'Add Liquidity')}\r\n                </Button>\r\n                </NewButton>\r\n              )\r\n            }\r\n\r\n              {/* <div>\r\n                <Text fontSize=\"14px\" style={{ padding: '.5rem 0 .5rem 0' }}>\r\n                  {TranslateString(106, \"Don't see a pool you joined?\")}{' '}\r\n                  <StyledInternalLink id=\"import-pool-link\" to=\"/find\">\r\n                    {TranslateString(108, 'Import it.')}\r\n                  </StyledInternalLink>\r\n                </Text>\r\n                <Text fontSize=\"14px\" style={{ padding: '.5rem 0 .5rem 0' }}>\r\n                  {TranslateString(1172, 'Or, if you staked your LP tokens in a farm, unstake them to see them here.')}\r\n                </Text>\r\n              </div> */}\r\n            </AutoColumn>\r\n          </CardBody>\r\n        </AutoColumn>\r\n        </Wrapper>\r\n      </AppBody>\r\n    </Container>\r\n  )\r\n}\r\n","D:\\Code\\swap-interface-v1\\src\\pages\\PoolFinder\\index.tsx",[],"D:\\Code\\swap-interface-v1\\src\\pages\\Migration\\index.tsx",[],"D:\\Code\\swap-interface-v1\\src\\components\\AppHeader\\index.jsx",["801","802","803","804"],"/* eslint-disable import/no-unresolved */\r\n/* eslint-disable import/order */\r\n/* eslint-disable react/jsx-filename-extension */\r\n/* eslint-disable jsx-a11y/no-noninteractive-element-interactions */\r\n/* eslint-disable jsx-a11y/click-events-have-key-events */\r\n/* eslint-disable jsx-a11y/no-static-element-interactions */\r\n/* eslint-disable no-unused-expressions */\r\nimport React, { useEffect, useState } from \"react\";\r\nimport \"./index.scss\";\r\nimport { useWeb3React } from \"@web3-react/core\";\r\nimport Button from \"../ConnectButton\";\r\nimport ConnectWallet from \"../ConnectWallet\";\r\nimport WalletOption from \"../WalletOption\";\r\nimport logo from \"../../assets/images/logo.png\";\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\nimport { subSplit } from \"../../util\";\r\nimport { Menu, Dropdown } from \"antd\";\r\nimport useAuth from \"hooks/useAuth\";\r\nimport burger from \"../../assets/images/burger.png\";\r\n\r\nfunction Index(props) {\r\n  const history = useHistory();\r\n  const location = useLocation();\r\n  const [showMenu, setShowMenu] = useState(false);\r\n  const { account } = useWeb3React();\r\n  const { logout } = useAuth();\r\n  const [active, setActive] = useState(0);\r\n\r\n  window.ethereum &&\r\n    window.ethereum.on(\"chainChanged\", (_chainId) => window.location.reload());\r\n\r\n  window.ethereum &&\r\n    window.ethereum.on(\"accountsChanged\", (accounts) => {\r\n      console.log(accounts);\r\n    });\r\n\r\n  const nameList = {\r\n    \"/\": \"HOME\",\r\n    \"/l2wallet\": \"L2 WALLET\",\r\n    \"/pool\": \"POOL\",\r\n    \"/swap\": \"SWAP\",\r\n  };\r\n  const MenuList = [\r\n    {\r\n      name: \"HOME\",\r\n      url: \"/\",\r\n    },\r\n    {\r\n      name: \"POOL\",\r\n      url: \"/pool\",\r\n    },\r\n    {\r\n      name: \"SWAP\",\r\n      url: \"/swap\",\r\n    },\r\n  ];\r\n\r\n  const onClick = ({ key }) => {\r\n    if (key === \"logout\") {\r\n      logout();\r\n      window.localStorage.removeItem(\"connectorId\");\r\n    }\r\n  };\r\n\r\n  const menu = (\r\n    <Menu onClick={onClick}>\r\n      <Menu.Item key=\"logout\">Disconnect Wallet</Menu.Item>\r\n    </Menu>\r\n  );\r\n  return (\r\n    <header className=\"flex items-center header\">\r\n      <div className=\"flex items-center justify-between header-wrap flex-nowrap\">\r\n        <img src={logo} alt=\"piswap\" className=\"logo\" />\r\n        <>\r\n          <div className=\"hidden header-title sm:block\">\r\n            <ul>\r\n              {MenuList.map((item, index) => {\r\n                return (\r\n                  <li\r\n                    key={`menu-${item.name}`}\r\n                    onClick={() => {\r\n                      history.push(item.url);\r\n                      setActive(index);\r\n                    }}\r\n                    className={`${active === index ? \"active\" : \"\"}`}\r\n                  >\r\n                    {item.name}\r\n                  </li>\r\n                );\r\n              })}\r\n            </ul>\r\n          </div>\r\n          <div className=\"block header-title sm:hidden\">\r\n            {nameList[location.pathname]}\r\n          </div>\r\n        </>\r\n        <>\r\n          <div\r\n            className=\"items-center hidden mt-4 sm:mt-0 sm:flex\"\r\n            id=\"header-right\"\r\n          >\r\n            <WalletOption />\r\n            {account ? (\r\n              <Dropdown\r\n                overlay={menu}\r\n                trigger={[\"click\"]}\r\n                getPopupContainer={() =>\r\n                  document.getElementById(\"header-right\")\r\n                }\r\n              >\r\n                <Button>{subSplit(account, 6, 4)}</Button>\r\n              </Dropdown>\r\n            ) : (\r\n              <ConnectWallet>\r\n                <Button>Connect Wallet</Button>\r\n              </ConnectWallet>\r\n            )}\r\n          </div>\r\n          <div\r\n            className=\"block burger sm:hidden\"\r\n            onClick={() => setShowMenu(true)}\r\n          >\r\n            <img src={burger} alt=\"memu\" />\r\n          </div>\r\n        </>\r\n      </div>\r\n\r\n      {showMenu && (\r\n        <div className=\"block open-menu sm:hidden\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <img src={logo} alt=\"piswap\" className=\"logo\" />\r\n            <span className=\"close\" onClick={() => setShowMenu(false)}>\r\n              &times;\r\n            </span>\r\n          </div>\r\n          <ul className=\"cell-list\">\r\n            {Object.keys(nameList).map((name) => {\r\n              return (\r\n                <li className={name === \"/swap\" ? \"active\" : \"\"} key={name}>\r\n                  <a href={name === \"/l2wallet\" ? \"/l2wallet?withdraw\" : name}>\r\n                    {nameList[name]}\r\n                  </a>\r\n                </li>\r\n              );\r\n            })}\r\n          </ul>\r\n        </div>\r\n      )}\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Index;\r\n",["805","806","807","808","809"],"D:\\Code\\swap-interface-v1\\src\\components\\AppFooter\\index.jsx",["810"],"/* eslint-disable import/no-unresolved */\r\n/* eslint-disable import/order */\r\n/* eslint-disable react/jsx-filename-extension */\r\n/* eslint-disable jsx-a11y/no-noninteractive-element-interactions */\r\n/* eslint-disable jsx-a11y/click-events-have-key-events */\r\n/* eslint-disable jsx-a11y/no-static-element-interactions */\r\n/* eslint-disable no-unused-expressions */\r\nimport React from 'react'\r\nimport './index.scss'\r\nimport github from '../../assets/images/github.png'\r\nimport twitter from '../../assets/images/twitter.png'\r\nimport telegram from '../../assets/images/telegram.png'\r\n\r\nfunction Index(props) {\r\n  return (\r\n    <footer className=\"footer\">\r\n      <div className=\"footer-item\">\r\n        <a href=\"https://pizzap.gitbook.io/pizzap/\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n          <img src={github} alt=\"github\" />\r\n        </a>\r\n      </div>\r\n      <div className=\"footer-item\">\r\n        <a href=\"https://twitter.com/pizzap_io\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n          <img src={twitter} alt=\"twitter\" />\r\n        </a>\r\n      </div>\r\n      <div className=\"footer-item\">\r\n        <a href=\"https://t.me/pizzap_io\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n          <img src={telegram} alt=\"telegram\" />\r\n        </a>\r\n      </div>\r\n    </footer>\r\n  )\r\n}\r\n\r\nexport default Index\r\n","D:\\Code\\swap-interface-v1\\src\\state\\application\\reducer.ts",[],"D:\\Code\\swap-interface-v1\\src\\state\\transactions\\reducer.ts",[],"D:\\Code\\swap-interface-v1\\src\\state\\lists\\reducer.ts",[],"D:\\Code\\swap-interface-v1\\src\\utils\\theme.ts",[],"D:\\Code\\swap-interface-v1\\src\\state\\multicall\\reducer.ts",[],"D:\\Code\\swap-interface-v1\\src\\state\\swap\\reducer.ts",[],"D:\\Code\\swap-interface-v1\\src\\state\\global\\actions.ts",[],"D:\\Code\\swap-interface-v1\\src\\state\\user\\reducer.ts",[],"D:\\Code\\swap-interface-v1\\src\\state\\mint\\reducer.ts",[],"D:\\Code\\swap-interface-v1\\src\\state\\burn\\reducer.ts",[],"D:\\Code\\swap-interface-v1\\src\\utils\\index.ts",[],"D:\\Code\\swap-interface-v1\\src\\connectors\\index.ts",[],"D:\\Code\\swap-interface-v1\\src\\utils\\useGetCakeBusdLpPrice.ts",[],"D:\\Code\\swap-interface-v1\\src\\constants\\multicall\\index.ts",[],"D:\\Code\\swap-interface-v1\\src\\hooks\\useToast.ts",[],"D:\\Code\\swap-interface-v1\\src\\pages\\Migration\\FAQ.tsx",[],"D:\\Code\\swap-interface-v1\\src\\pages\\Pool\\styleds.tsx",[],"D:\\Code\\swap-interface-v1\\src\\pages\\Migration\\SecondCard.tsx",[],"D:\\Code\\swap-interface-v1\\src\\pages\\Migration\\FirstCard.tsx",[],"D:\\Code\\swap-interface-v1\\src\\constants\\lists.ts",[],"D:\\Code\\swap-interface-v1\\src\\state\\toasts\\index.ts",[],"D:\\Code\\swap-interface-v1\\src\\state\\burn\\actions.ts",[],"D:\\Code\\swap-interface-v1\\src\\connectors\\NetworkConnector.ts",[],"D:\\Code\\swap-interface-v1\\src\\pages\\Migration\\config.ts",[],"D:\\Code\\swap-interface-v1\\src\\components\\Loader\\index.tsx",[],"D:\\Code\\swap-interface-v1\\src\\components\\Container.tsx",[],"D:\\Code\\swap-interface-v1\\src\\hooks\\Trades.ts",[],"D:\\Code\\swap-interface-v1\\src\\hooks\\Tokens.ts",[],"D:\\Code\\swap-interface-v1\\src\\state\\actions.ts",[],"D:\\Code\\swap-interface-v1\\src\\state\\swap\\hooks.ts",[],"D:\\Code\\swap-interface-v1\\src\\hooks\\useI18n.ts",[],"D:\\Code\\swap-interface-v1\\src\\data\\Reserves.ts",[],"D:\\Code\\swap-interface-v1\\src\\state\\wallet\\hooks.ts",[],"D:\\Code\\swap-interface-v1\\src\\state\\user\\hooks.tsx",[],"D:\\Code\\swap-interface-v1\\src\\utils\\wrappedCurrency.ts",[],"D:\\Code\\swap-interface-v1\\src\\state\\multicall\\hooks.ts",[],"D:\\Code\\swap-interface-v1\\src\\state\\lists\\hooks.ts",[],"D:\\Code\\swap-interface-v1\\src\\utils\\prices.ts",[],"D:\\Code\\swap-interface-v1\\src\\state\\swap\\actions.ts",[],"D:\\Code\\swap-interface-v1\\src\\hooks\\useENS.ts",[],"D:\\Code\\swap-interface-v1\\src\\hooks\\useParsedQueryString.ts",[],"D:\\Code\\swap-interface-v1\\src\\components\\PositionCard\\index.tsx",[],"D:\\Code\\swap-interface-v1\\src\\state\\mint\\actions.ts",[],"D:\\Code\\swap-interface-v1\\src\\components\\Shared\\index.tsx",[],"D:\\Code\\swap-interface-v1\\src\\state\\user\\actions.ts",[],"D:\\Code\\swap-interface-v1\\src\\components\\FoldableText\\index.tsx",[],"D:\\Code\\swap-interface-v1\\src\\utils\\translateTextHelpers.ts",[],"D:\\Code\\swap-interface-v1\\src\\hooks\\useENSName.ts",[],"D:\\Code\\swap-interface-v1\\src\\hooks\\useENSAddress.ts",[],"D:\\Code\\swap-interface-v1\\src\\utils\\currencyId.ts",[],"D:\\Code\\swap-interface-v1\\src\\data\\TotalSupply.ts",[],"D:\\Code\\swap-interface-v1\\src\\components\\Shared\\Common.tsx",[],"D:\\Code\\swap-interface-v1\\src\\components\\swap\\styleds.tsx",[],"D:\\Code\\swap-interface-v1\\src\\pages\\AppBody.tsx",[],"D:\\Code\\swap-interface-v1\\src\\util\\index.js",[],"D:\\Code\\swap-interface-v1\\src\\hooks\\useAuth.ts",[],"D:\\Code\\swap-interface-v1\\src\\utils\\isZero.ts",[],"D:\\Code\\swap-interface-v1\\src\\components\\NewButton\\index.tsx",[],"D:\\Code\\swap-interface-v1\\src\\components\\DoubleLogo\\index.tsx",[],"D:\\Code\\swap-interface-v1\\src\\components\\CurrencyLogo\\index.tsx",[],"D:\\Code\\swap-interface-v1\\src\\components\\Row\\index.tsx",[],"D:\\Code\\swap-interface-v1\\src\\components\\Card\\index.tsx",[],"D:\\Code\\swap-interface-v1\\src\\components\\Column\\index.tsx",[],"D:\\Code\\swap-interface-v1\\src\\components\\WalletOption\\index.jsx",["811","812","813","814"],"/* eslint-disable prefer-promise-reject-errors */\r\n/* eslint-disable @typescript-eslint/no-shadow */\r\n/* eslint-disable react-hooks/exhaustive-deps */\r\n/* eslint-disable @typescript-eslint/no-var-requires */\r\n/* eslint-disable import/no-unresolved */\r\n/* eslint-disable import/order */\r\n/* eslint-disable react/jsx-filename-extension */\r\n/* eslint-disable jsx-a11y/no-noninteractive-element-interactions */\r\n/* eslint-disable jsx-a11y/click-events-have-key-events */\r\n/* eslint-disable jsx-a11y/no-static-element-interactions */\r\n/* eslint-disable no-unused-expressions */\r\nimport React, { useState, useEffect } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Dropdown, Menu, Skeleton } from 'antd'\r\nimport CONFIG from '../../util/pool/config.json'\r\nimport { getBalanceOf } from '../../util/pool/Balance'\r\nimport { toFixed } from '../../util'\r\nimport { getBalance } from '../../util/pool/Pi'\r\nimport Wallet from '../../assets/images/wallet.svg'\r\n\r\nconst PNFT = require('../../assets/images/pnft.jpg')\r\nconst PI = require('../../assets/images/pi.jpg')\r\n\r\nconst coinList = [\r\n    {\r\n        icon: PI,\r\n        name: 'PI',\r\n        amount: 0,\r\n        wait: getBalance,\r\n    },\r\n    {\r\n        key: CONFIG.pNftContractAddress,\r\n        icon: PNFT,\r\n        name: 'PNFT',\r\n        amount: 0,\r\n        wait: getBalanceOf,\r\n    }\r\n]\r\n\r\nfunction WalletOption() {\r\n    const [loading, setLoading] = useState(false)\r\n    const [list, setList] = useState([])\r\n    const { account } = useWeb3React()\r\n    useEffect(() => {\r\n        account && initialize(account)\r\n        return () => {\r\n            console.log('销毁');\r\n        }\r\n    }, [account])\r\n\r\n    const initialize = (address) => {\r\n        setLoading(true)\r\n        const list = []\r\n        coinList.map(async (x) => {\r\n            await list.push(getPromiseBalance(x, address))\r\n        })\r\n\r\n        Promise.all(list).then(res => {\r\n            setList(res)\r\n            setLoading(false)\r\n        })\r\n    }\r\n\r\n    const getPromiseBalance = (x, address) => {\r\n        return new Promise((resolve, riject) => {\r\n            (x.key ? x.wait(x.key, address) : x.wait(address)).then(v => {\r\n                resolve({ name: x.name, icon: x.icon, amount: v })\r\n            }).catch(e => {\r\n                riject({ name: x.name, icon: x.icon, amount: 0 })\r\n            })\r\n        })\r\n    }\r\n    return (\r\n        <Dropdown overlay={\r\n            <Menu style={{ width: 270, height: 215, overflowY: 'auto' }}>\r\n                <Skeleton loading={loading} active>\r\n                    <div style={{ padding: 10 }}>\r\n                        {list && list.map(item => (\r\n                            <div key={item.name} style={{ display: 'flex', alignItems: 'center' }}>\r\n                                <img src={item.icon.default} alt={item.name} style={{ width: 25, height: 25 }} />\r\n                                <span style={{ flex: .3, paddingLeft: 10 }}>{item.name}</span>\r\n                                <span style={{ flex: 1, textAlign: 'end' }}>{toFixed(item.amount)}</span>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                </Skeleton>\r\n            </Menu>\r\n        } placement=\"bottomLeft\" trigger={['click']} destroyPopupOnHide getPopupContainer={() => document.getElementById('header-right')}>\r\n            <img src={Wallet} alt=\"wallet\" style={{ width: 36, height: 31.5, marginRight: 40, cursor: 'pointer' }} />\r\n        </Dropdown>\r\n    );\r\n}\r\n\r\nexport default WalletOption;","D:\\Code\\swap-interface-v1\\src\\components\\ConnectWallet\\index.jsx",[],"D:\\Code\\swap-interface-v1\\src\\components\\ConnectButton\\index.jsx",[],"D:\\Code\\swap-interface-v1\\src\\components\\SearchModal\\CurrencySearchModal.tsx",[],"D:\\Code\\swap-interface-v1\\src\\components\\Popups\\PopupItem.tsx",[],"D:\\Code\\swap-interface-v1\\src\\hooks\\useHttpLocations.ts",[],"D:\\Code\\swap-interface-v1\\src\\components\\pancake\\CoinLogo.ts",[],"D:\\Code\\swap-interface-v1\\src\\components\\NavigationTabs\\index.tsx",[],"D:\\Code\\swap-interface-v1\\src\\hooks\\useLast.ts",[],"D:\\Code\\swap-interface-v1\\src\\components\\SearchModal\\ListSelect.tsx",[],"D:\\Code\\swap-interface-v1\\src\\components\\SearchModal\\CurrencySearch.tsx",[],"D:\\Code\\swap-interface-v1\\src\\util\\pool\\Pi.js",["815"],"/* eslint-disable prefer-const */\r\n/* eslint-disable @typescript-eslint/no-shadow */\r\n/* eslint-disable no-async-promise-executor */\r\nimport { Contract } from '@ethersproject/contracts'\r\nimport { Web3Provider, getDefaultProvider } from '@ethersproject/providers'\r\nimport { formatEther, parseEther } from '@ethersproject/units'\r\nimport PI_ABI from './abis/PiStakingEpoch.json'\r\nimport UNI_ABI from './abis/UniswapV2Pair.json' // 质押输入\r\nimport CONFIG from './config.json';\r\n\r\nconst PI_STAKING = new Contract(CONFIG.piContractAddress, PI_ABI, getDefaultProvider(CONFIG.testNetWork));\r\n\r\nconst UNISWAP_STAKING = new Contract(CONFIG.uniswapContractAddress, UNI_ABI.abi, getDefaultProvider(CONFIG.testNetWork));\r\n/**\r\n * 平台币余额\r\n * @param {userAddress} 用户地址 \r\n * @returns \r\n */\r\nexport function getBalance(userAddress) {\r\n    return new Promise(async (resolve, reject) => {\r\n        try {\r\n            const { ethereum } = window\r\n            const bal = await ethereum.request({\r\n                method: 'eth_getBalance',\r\n                params: [userAddress, 'latest']\r\n            })\r\n            resolve(formatEther(bal))\r\n        } catch (error) {\r\n            resolve(error)\r\n        }\r\n    })\r\n\r\n}\r\n\r\n/**\r\n * 质押PI\r\n * @param {*} 质押PI的数量，PI的精度为18，数值按照精度换算好 {value}\r\n * @returns \r\n */\r\nexport function deposit(value) {\r\n    return new Promise(async (resolve, reject) => {\r\n        try {\r\n            const PI_STAKING = new Contract(CONFIG.piContractAddress, PI_ABI, new Web3Provider(window.web3.currentProvider).getSigner());\r\n            const list = await PI_STAKING.deposit({ value: parseEther(value) })\r\n            resolve(list)\r\n        } catch (error) {\r\n            reject(error)\r\n        }\r\n    })\r\n}\r\n\r\n/**\r\n * 查询制定用户地址上质押的PI数量\r\n * @param {*} 用户地址 _user\r\n * @returns {*} 质押的PI的数量，带有精度的数值 amount\r\n */\r\nexport function getStaking(_user) {\r\n    return new Promise(async (resolve, reject) => {\r\n        try {\r\n            const list = await PI_STAKING.getStaking(_user);\r\n            resolve(formatEther(list))\r\n        } catch (error) {\r\n            reject(error)\r\n        }\r\n    })\r\n}\r\n\r\n/**\r\n * 获取全网质押PI的总数量\r\n * @returns {*} 全网质押PI的总数，根据精度换算之后的数值 amount\r\n */\r\nexport function getTotalSupply() {\r\n    return new Promise(async (resolve, reject) => {\r\n        try {\r\n            const list = await PI_STAKING.getTotalSupply();\r\n            resolve(formatEther(list))\r\n        } catch (error) {\r\n            reject(error)\r\n        }\r\n    })\r\n}\r\n\r\n/**\r\n * 获取全网质押PI的总数量\r\n * @param {_user} 查询用户地址上待领取的PNFT的数量\r\n * @returns {amount} 用户质押挖矿未领取的PNFT数量，根据精度换算之后的数值 \r\n */\r\nexport function getPendingReward(_user) {\r\n    return new Promise(async (resolve, reject) => {\r\n        try {\r\n            const list = await PI_STAKING.pendingReward(_user);\r\n            resolve(formatEther(list))\r\n        } catch (error) {\r\n            reject(error)\r\n        }\r\n    })\r\n}\r\n\r\n\r\n/**\r\n * 赎回质押的PI\r\n * @param {_amount} 待赎回的PI的数量，根据精度换算之后的数值\r\n * @returns {amount} 用户质押挖矿未领取的PNFT数量，根据精度换算之后的数值 \r\n */\r\nexport function getRedemption(_amount) {\r\n    return new Promise(async (resolve, reject) => {\r\n        try {\r\n            const PI_STAKING = new Contract(CONFIG.piContractAddress, PI_ABI, new Web3Provider(window.web3.currentProvider).getSigner());\r\n            const list = await PI_STAKING.withdraw(parseEther(_amount.toString()));\r\n            resolve(list)\r\n        } catch (error) {\r\n            reject(error)\r\n        }\r\n    })\r\n}\r\n\r\n\r\n/**\r\n * 计算APY\r\n * @returns {*} _reserve0 _reserve1\r\n */\r\n export function getApy() {\r\n    return new Promise(async (resolve, reject) => {\r\n        try {\r\n            // 币种价格\r\n            const reserves = await UNISWAP_STAKING.getReserves();\r\n            // 币种0的合约地址\r\n            const token0 = await UNISWAP_STAKING.token0();\r\n            // 币种1的合约地址\r\n            const token1 = await UNISWAP_STAKING.token1();\r\n            // 每个块的奖励\r\n            const totalReward = await PI_STAKING.rewardPerBlock();\r\n            let list = {\r\n                reserves,\r\n                token0,\r\n                token1,\r\n                totalReward: formatEther(totalReward)\r\n            }\r\n            resolve(list)\r\n        } catch (error) {\r\n            reject(error)\r\n        }\r\n    })\r\n}","D:\\Code\\swap-interface-v1\\src\\util\\pool\\Balance.js",[],"D:\\Code\\swap-interface-v1\\src\\components\\PageHeader\\SettingsModal.tsx",["816"],"import React from 'react'\r\nimport { Modal } from '@pancakeswap-libs/uikit'\r\nimport SlippageToleranceSetting from './SlippageToleranceSetting'\r\nimport TransactionDeadlineSetting from './TransactionDeadlineSetting'\r\nimport AudioSetting from './AudioSetting'\r\n\r\ntype SettingsModalProps = {\r\n  onDismiss?: () => void\r\n  translateString: (translationId: number, fallback: string) => string\r\n}\r\n\r\n// TODO: Fix UI Kit typings\r\nconst defaultOnDismiss = () => null\r\n\r\nconst SettingsModal = ({ onDismiss = defaultOnDismiss, translateString }: SettingsModalProps) => {\r\n  return (\r\n    <Modal title={translateString(1200, 'Settings')} onDismiss={onDismiss}>\r\n      <SlippageToleranceSetting translateString={translateString} />\r\n      <TransactionDeadlineSetting translateString={translateString} />\r\n      {/* <AudioSetting translateString={translateString} /> */}\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default SettingsModal\r\n","D:\\Code\\swap-interface-v1\\src\\components\\Popups\\TransactionPopup.tsx",[],"D:\\Code\\swap-interface-v1\\src\\components\\Popups\\ListUpdatePopup.tsx",[],"D:\\Code\\swap-interface-v1\\src\\components\\CardNav\\index.tsx",[],"D:\\Code\\swap-interface-v1\\src\\hooks\\useENSContentHash.ts",[],"D:\\Code\\swap-interface-v1\\src\\components\\ConnectWalletButton\\index.tsx",[],"D:\\Code\\swap-interface-v1\\src\\utils\\uriToHttp.ts",[],"D:\\Code\\swap-interface-v1\\src\\utils\\parseENSAddress.ts",[],"D:\\Code\\swap-interface-v1\\src\\utils\\contenthashToUri.ts",[],"D:\\Code\\swap-interface-v1\\src\\components\\Logo\\index.tsx",[],"D:\\Code\\swap-interface-v1\\src\\utils\\listVersionLabel.ts",[],"D:\\Code\\swap-interface-v1\\src\\components\\SearchModal\\sorting.ts",[],"D:\\Code\\swap-interface-v1\\src\\hooks\\useToggle.ts",[],"D:\\Code\\swap-interface-v1\\src\\components\\Modal\\index.tsx",[],"D:\\Code\\swap-interface-v1\\src\\components\\QuestionHelper\\index.tsx",[],"D:\\Code\\swap-interface-v1\\src\\components\\V2ExchangeRedirectModal\\index.tsx",[],"D:\\Code\\swap-interface-v1\\src\\components\\SearchModal\\styleds.tsx",[],"D:\\Code\\swap-interface-v1\\src\\hooks\\useOnClickOutside.tsx",[],"D:\\Code\\swap-interface-v1\\src\\components\\PageHeader\\TransactionDeadlineSetting.tsx",[],"D:\\Code\\swap-interface-v1\\src\\components\\SearchModal\\filtering.ts",[],"D:\\Code\\swap-interface-v1\\src\\components\\PageHeader\\SlippageToleranceSetting.tsx",[],"D:\\Code\\swap-interface-v1\\src\\components\\SearchModal\\SortButton.tsx",[],"D:\\Code\\swap-interface-v1\\src\\components\\SearchModal\\CurrencyList.tsx",[],"D:\\Code\\swap-interface-v1\\src\\components\\SearchModal\\CommonBases.tsx",[],"D:\\Code\\swap-interface-v1\\src\\components\\ListLogo\\index.tsx",[],"D:\\Code\\swap-interface-v1\\src\\components\\Tooltip\\index.tsx",[],"D:\\Code\\swap-interface-v1\\src\\components\\Popover\\index.tsx",[],"D:\\Code\\swap-interface-v1\\src\\state\\burn\\hooks.ts",[],"D:\\Code\\swap-interface-v1\\src\\hooks\\useApproveCallback.ts",[],"D:\\Code\\swap-interface-v1\\src\\utils\\useDebouncedChangeHandler.ts",[],"D:\\Code\\swap-interface-v1\\src\\state\\transactions\\hooks.tsx",[],"D:\\Code\\swap-interface-v1\\src\\pages\\AddLiquidity\\PoolPriceBar.tsx",[],"D:\\Code\\swap-interface-v1\\src\\utils\\maxAmountSpend.ts",[],"D:\\Code\\swap-interface-v1\\src\\hooks\\useWrapCallback.ts",[],"D:\\Code\\swap-interface-v1\\src\\hooks\\useSwapCallback.ts",[],"D:\\Code\\swap-interface-v1\\src\\components\\swap\\confirmPriceImpactWithoutFee.ts",[],"D:\\Code\\swap-interface-v1\\src\\data\\Allowances.ts",[],"D:\\Code\\swap-interface-v1\\src\\components\\swap\\AdvancedSwapDetailsDropdown.tsx",[],"D:\\Code\\swap-interface-v1\\src\\components\\swap\\ConfirmSwapModal.tsx",[],"D:\\Code\\swap-interface-v1\\src\\components\\Slider\\index.tsx",[],"D:\\Code\\swap-interface-v1\\src\\components\\CurrencyInputPanel\\index.tsx",[],"D:\\Code\\swap-interface-v1\\src\\components\\TransactionConfirmationModal\\index.tsx",[],"D:\\Code\\swap-interface-v1\\src\\components\\ProgressSteps\\index.tsx",[],"D:\\Code\\swap-interface-v1\\src\\components\\SafeMoonWarningModal\\index.tsx",[],"D:\\Code\\swap-interface-v1\\src\\components\\SyrupWarningModal\\index.tsx",[],"D:\\Code\\swap-interface-v1\\src\\components\\TokenWarningModal\\index.tsx",[],"D:\\Code\\swap-interface-v1\\src\\components\\AddressInputPanel\\index.tsx",[],"D:\\Code\\swap-interface-v1\\src\\components\\swap\\AdvancedSwapDetails.tsx",[],"D:\\Code\\swap-interface-v1\\src\\components\\swap\\SwapModalHeader.tsx",[],"D:\\Code\\swap-interface-v1\\src\\components\\TransactionConfirmationModal\\TransactionSubmittedContent.tsx",["817"],"import { ChainId } from '@paiswap/sdk'\r\nimport React, { useContext } from 'react'\r\nimport { ThemeContext } from 'styled-components'\r\nimport { Button, LinkExternal } from '@pancakeswap-libs/uikit'\r\nimport { ArrowUpCircle } from 'react-feather'\r\nimport { AutoColumn } from '../Column'\r\nimport { getBscScanLink } from '../../utils'\r\nimport { Wrapper, Section, ConfirmedIcon, ContentHeader } from './helpers'\r\nimport NewButton from '../NewButton'\r\n\r\ntype TransactionSubmittedContentProps = {\r\n  onDismiss: () => void\r\n  hash: string | undefined\r\n  chainId: ChainId\r\n}\r\n\r\nconst TransactionSubmittedContent = ({ onDismiss, chainId, hash }: TransactionSubmittedContentProps) => {\r\n  const theme = useContext(ThemeContext)\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Section>\r\n        <ContentHeader onDismiss={onDismiss}>Transaction submitted</ContentHeader>\r\n        <ConfirmedIcon>\r\n          <ArrowUpCircle strokeWidth={0.5} size={97} color=\"#FA9124\" />\r\n        </ConfirmedIcon>\r\n        <AutoColumn gap=\"8px\" justify=\"center\">\r\n          {chainId && hash && (\r\n            <LinkExternal color=\"#FA9124\" href={getBscScanLink(chainId, hash, 'transaction')}>View on PiScan</LinkExternal>\r\n          )}\r\n          <NewButton>\r\n          <Button onClick={onDismiss} mt=\"20px\">\r\n            Close\r\n          </Button>\r\n          </NewButton>\r\n        </AutoColumn>\r\n      </Section>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default TransactionSubmittedContent\r\n","D:\\Code\\swap-interface-v1\\src\\components\\TransactionConfirmationModal\\ConfirmationPendingContent.tsx",[],"D:\\Code\\swap-interface-v1\\src\\components\\TransactionConfirmationModal\\TransactionErrorContent.tsx",[],"D:\\Code\\swap-interface-v1\\src\\components\\TransactionConfirmationModal\\ConfirmationModalContent.tsx",[],"D:\\Code\\swap-interface-v1\\src\\components\\TransactionConfirmationModal\\TransactionConfirmationModal.tsx",[],"D:\\Code\\swap-interface-v1\\src\\components\\swap\\SwapModalFooter.tsx",["818"],"import { Trade, TradeType } from '@paiswap/sdk'\r\nimport React, { useMemo, useState } from 'react'\r\nimport { Text, Button } from '@pancakeswap-libs/uikit'\r\nimport { Repeat } from 'react-feather'\r\n\r\nimport useI18n from 'hooks/useI18n'\r\nimport { Field } from '../../state/swap/actions'\r\nimport {\r\n  computeSlippageAdjustedAmounts,\r\n  computeTradePriceBreakdown,\r\n  formatExecutionPrice,\r\n  warningSeverity,\r\n} from '../../utils/prices'\r\nimport { AutoColumn } from '../Column'\r\nimport QuestionHelper from '../QuestionHelper'\r\nimport { AutoRow, RowBetween, RowFixed } from '../Row'\r\nimport FormattedPriceImpact from './FormattedPriceImpact'\r\nimport { StyledBalanceMaxMini, SwapCallbackError } from './styleds'\r\nimport NewButton from '../NewButton'\r\n\r\nexport default function SwapModalFooter({\r\n  trade,\r\n  onConfirm,\r\n  allowedSlippage,\r\n  swapErrorMessage,\r\n  disabledConfirm,\r\n}: {\r\n  trade: Trade\r\n  allowedSlippage: number\r\n  onConfirm: () => void\r\n  swapErrorMessage: string | undefined\r\n  disabledConfirm: boolean\r\n}) {\r\n  const [showInverted, setShowInverted] = useState<boolean>(false)\r\n  const slippageAdjustedAmounts = useMemo(() => computeSlippageAdjustedAmounts(trade, allowedSlippage), [\r\n    allowedSlippage,\r\n    trade,\r\n  ])\r\n  const { priceImpactWithoutFee, realizedLPFee } = useMemo(() => computeTradePriceBreakdown(trade), [trade])\r\n  const severity = warningSeverity(priceImpactWithoutFee)\r\n  const TranslateString = useI18n()\r\n\r\n  return (\r\n    <>\r\n      <AutoColumn gap=\"0px\">\r\n        <RowBetween align=\"center\">\r\n          <Text fontSize=\"14px\">Price</Text>\r\n          <Text\r\n            fontSize=\"14px\"\r\n            style={{\r\n              justifyContent: 'center',\r\n              alignItems: 'center',\r\n              display: 'flex',\r\n              textAlign: 'right',\r\n              paddingLeft: '8px',\r\n              fontWeight: 500,\r\n            }}\r\n          >\r\n            {formatExecutionPrice(trade, showInverted)}\r\n            <StyledBalanceMaxMini onClick={() => setShowInverted(!showInverted)}>\r\n              <Repeat size={14} />\r\n            </StyledBalanceMaxMini>\r\n          </Text>\r\n        </RowBetween>\r\n\r\n        <RowBetween>\r\n          <RowFixed>\r\n            <Text fontSize=\"14px\">\r\n              {trade.tradeType === TradeType.EXACT_INPUT\r\n                ? TranslateString(1210, 'Minimum received')\r\n                : TranslateString(220, 'Maximum sold')}\r\n            </Text>\r\n            <QuestionHelper\r\n              text={TranslateString(\r\n                202,\r\n                'Your transaction will revert if there is a large, unfavorable price movement before it is confirmed.'\r\n              )}\r\n            />\r\n          </RowFixed>\r\n          <RowFixed>\r\n            <Text fontSize=\"14px\">\r\n              {trade.tradeType === TradeType.EXACT_INPUT\r\n                ? slippageAdjustedAmounts[Field.OUTPUT]?.toSignificant(4) ?? '-'\r\n                : slippageAdjustedAmounts[Field.INPUT]?.toSignificant(4) ?? '-'}\r\n            </Text>\r\n            <Text fontSize=\"14px\" marginLeft=\"4px\">\r\n              {trade.tradeType === TradeType.EXACT_INPUT\r\n                ? trade.outputAmount.currency.symbol\r\n                : trade.inputAmount.currency.symbol}\r\n            </Text>\r\n          </RowFixed>\r\n        </RowBetween>\r\n        <RowBetween>\r\n          <RowFixed>\r\n            <Text fontSize=\"14px\">{TranslateString(226, 'Price Impact')}</Text>\r\n            <QuestionHelper\r\n              text={TranslateString(224, 'The difference between the market price and your price due to trade size.')}\r\n            />\r\n          </RowFixed>\r\n          <FormattedPriceImpact priceImpact={priceImpactWithoutFee} />\r\n        </RowBetween>\r\n        <RowBetween>\r\n          <RowFixed>\r\n            <Text fontSize=\"14px\">{TranslateString(228, 'Liquidity Provider Fee')}</Text>\r\n            <QuestionHelper\r\n              text={TranslateString(\r\n                999,\r\n                'For each trade a 0.2% fee is paid. 0.17% goes to liquidity providers and 0.03% goes to the PancakeSwap treasury.'\r\n              )}\r\n            />\r\n          </RowFixed>\r\n          <Text fontSize=\"14px\">\r\n            {realizedLPFee ? `${realizedLPFee?.toSignificant(6)} ${trade.inputAmount.currency.symbol}` : '-'}\r\n          </Text>\r\n        </RowBetween>\r\n      </AutoColumn>\r\n\r\n      {/* <AutoRow> */}\r\n        <NewButton>\r\n        <Button\r\n          onClick={onConfirm}\r\n          disabled={disabledConfirm}\r\n          variant={severity > 2 ? 'danger' : 'primary'}\r\n          mt=\"10px\"\r\n          id=\"confirm-swap-or-send\"\r\n          width=\"100%\"\r\n        >\r\n          {severity > 2 ? 'Swap Anyway' : 'Confirm Swap'}\r\n        </Button>\r\n        </NewButton>\r\n\r\n        {swapErrorMessage ? <SwapCallbackError error={swapErrorMessage} /> : null}\r\n      {/* </AutoRow> */}\r\n    </>\r\n  )\r\n}\r\n","D:\\Code\\swap-interface-v1\\src\\components\\swap\\SwapRoute.tsx",[],"D:\\Code\\swap-interface-v1\\src\\components\\swap\\FormattedPriceImpact.tsx",[],"D:\\Code\\swap-interface-v1\\src\\components\\NumericalInput\\index.tsx",[],"D:\\Code\\swap-interface-v1\\src\\components\\TransactionConfirmationModal\\helpers.tsx",[],"D:\\Code\\swap-interface-v1\\src\\pages\\AddLiquidity\\ConfirmAddModalBottom.tsx",["819"],"import { Currency, CurrencyAmount, Fraction, Percent } from '@paiswap/sdk'\r\nimport React from 'react'\r\nimport { Button, Text } from '@pancakeswap-libs/uikit'\r\nimport { TranslateString } from 'utils/translateTextHelpers'\r\nimport { RowBetween, RowFixed } from '../../components/Row'\r\nimport CurrencyLogo from '../../components/CurrencyLogo'\r\nimport { Field } from '../../state/mint/actions'\r\nimport NewButton from '../../components/NewButton'\r\n\r\nexport function ConfirmAddModalBottom({\r\n  noLiquidity,\r\n  price,\r\n  currencies,\r\n  parsedAmounts,\r\n  poolTokenPercentage,\r\n  onAdd,\r\n}: {\r\n  noLiquidity?: boolean\r\n  price?: Fraction\r\n  currencies: { [field in Field]?: Currency }\r\n  parsedAmounts: { [field in Field]?: CurrencyAmount }\r\n  poolTokenPercentage?: Percent\r\n  onAdd: () => void\r\n}) {\r\n  return (\r\n    <>\r\n      <RowBetween>\r\n        <Text>{currencies[Field.CURRENCY_A]?.symbol} Deposited</Text>\r\n        <RowFixed>\r\n          <CurrencyLogo currency={currencies[Field.CURRENCY_A]} style={{ marginRight: '8px' }} />\r\n          <Text>{parsedAmounts[Field.CURRENCY_A]?.toSignificant(6)}</Text>\r\n        </RowFixed>\r\n      </RowBetween>\r\n      <RowBetween>\r\n        <Text>{currencies[Field.CURRENCY_B]?.symbol} Deposited</Text>\r\n        <RowFixed>\r\n          <CurrencyLogo currency={currencies[Field.CURRENCY_B]} style={{ marginRight: '8px' }} />\r\n          <Text>{parsedAmounts[Field.CURRENCY_B]?.toSignificant(6)}</Text>\r\n        </RowFixed>\r\n      </RowBetween>\r\n      <RowBetween>\r\n        <Text>Rates</Text>\r\n        <Text>\r\n          {`1 ${currencies[Field.CURRENCY_A]?.symbol} = ${price?.toSignificant(4)} ${\r\n            currencies[Field.CURRENCY_B]?.symbol\r\n          }`}\r\n        </Text>\r\n      </RowBetween>\r\n      <RowBetween style={{ justifyContent: 'flex-end' }}>\r\n        <Text>\r\n          {`1 ${currencies[Field.CURRENCY_B]?.symbol} = ${price?.invert().toSignificant(4)} ${\r\n            currencies[Field.CURRENCY_A]?.symbol\r\n          }`}\r\n        </Text>\r\n      </RowBetween>\r\n      <RowBetween>\r\n        <Text>Share of Pool:</Text>\r\n        <Text>{noLiquidity ? '100' : poolTokenPercentage?.toSignificant(4)}%</Text>\r\n      </RowBetween>\r\n      <NewButton>\r\n      <Button mt=\"20px\" onClick={onAdd}>\r\n        {noLiquidity ? 'Create Pool & Supply' : 'Confirm Supply'}\r\n      </Button>\r\n      </NewButton>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ConfirmAddModalBottom\r\n","D:\\Code\\swap-interface-v1\\src\\state\\mint\\hooks.ts",[],"D:\\Code\\swap-interface-v1\\src\\components\\Pane\\index.tsx",[],"D:\\Code\\swap-interface-v1\\src\\pages\\Index\\index.tsx",[],"D:\\Code\\swap-interface-v1\\src\\pages\\Index\\components\\banner.tsx",[],"D:\\Code\\swap-interface-v1\\src\\pages\\Index\\components\\stake.tsx",["820","821","822","823"],"D:\\Code\\swap-interface-v1\\src\\constants\\home.ts",[],{"ruleId":"824","replacedBy":"825"},{"ruleId":"826","replacedBy":"827"},{"ruleId":"828","replacedBy":"829"},{"ruleId":"830","replacedBy":"831"},{"ruleId":"832","replacedBy":"833"},{"ruleId":"834","severity":1,"message":"835","line":5,"column":20,"nodeType":"836","messageId":"837","endLine":5,"endColumn":28},{"ruleId":"834","severity":1,"message":"838","line":6,"column":8,"nodeType":"836","messageId":"837","endLine":6,"endColumn":18},{"ruleId":"834","severity":1,"message":"839","line":22,"column":8,"nodeType":"836","messageId":"837","endLine":22,"endColumn":26},{"ruleId":"834","severity":1,"message":"840","line":26,"column":8,"nodeType":"836","messageId":"837","endLine":26,"endColumn":12},{"ruleId":"834","severity":1,"message":"841","line":89,"column":9,"nodeType":"836","messageId":"837","endLine":89,"endColumn":45},{"ruleId":"834","severity":1,"message":"842","line":6,"column":8,"nodeType":"836","messageId":"837","endLine":6,"endColumn":14},{"ruleId":"834","severity":1,"message":"843","line":11,"column":8,"nodeType":"836","messageId":"837","endLine":11,"endColumn":15},{"ruleId":"834","severity":1,"message":"844","line":113,"column":18,"nodeType":"836","messageId":"837","endLine":113,"endColumn":36},{"ruleId":"845","severity":1,"message":"846","line":122,"column":5,"nodeType":"847","messageId":"848","endLine":122,"endColumn":16},{"ruleId":"845","severity":1,"message":"846","line":159,"column":5,"nodeType":"847","messageId":"848","endLine":159,"endColumn":16},{"ruleId":"845","severity":1,"message":"846","line":175,"column":9,"nodeType":"847","messageId":"848","endLine":175,"endColumn":20},{"ruleId":"834","severity":1,"message":"849","line":4,"column":20,"nodeType":"836","messageId":"837","endLine":4,"endColumn":33},{"ruleId":"834","severity":1,"message":"842","line":5,"column":8,"nodeType":"836","messageId":"837","endLine":5,"endColumn":14},{"ruleId":"834","severity":1,"message":"843","line":12,"column":8,"nodeType":"836","messageId":"837","endLine":12,"endColumn":15},{"ruleId":"834","severity":1,"message":"850","line":17,"column":8,"nodeType":"836","messageId":"837","endLine":17,"endColumn":18},{"ruleId":"834","severity":1,"message":"851","line":24,"column":10,"nodeType":"836","messageId":"837","endLine":24,"endColumn":34},{"ruleId":"834","severity":1,"message":"852","line":38,"column":8,"nodeType":"836","messageId":"837","endLine":38,"endColumn":18},{"ruleId":"834","severity":1,"message":"853","line":292,"column":10,"nodeType":"836","messageId":"837","endLine":292,"endColumn":22},{"ruleId":"834","severity":1,"message":"854","line":292,"column":24,"nodeType":"836","messageId":"837","endLine":292,"endColumn":39},{"ruleId":"834","severity":1,"message":"842","line":2,"column":8,"nodeType":"836","messageId":"837","endLine":2,"endColumn":14},{"ruleId":"834","severity":1,"message":"843","line":6,"column":8,"nodeType":"836","messageId":"837","endLine":6,"endColumn":15},{"ruleId":"834","severity":1,"message":"855","line":10,"column":10,"nodeType":"836","messageId":"837","endLine":10,"endColumn":28},{"ruleId":"834","severity":1,"message":"852","line":21,"column":8,"nodeType":"836","messageId":"837","endLine":21,"endColumn":18},{"ruleId":"834","severity":1,"message":"856","line":8,"column":17,"nodeType":"836","messageId":"837","endLine":8,"endColumn":26},{"ruleId":"834","severity":1,"message":"857","line":21,"column":16,"nodeType":"836","messageId":"837","endLine":21,"endColumn":21},{"ruleId":"834","severity":1,"message":"858","line":30,"column":41,"nodeType":"836","messageId":"837","endLine":30,"endColumn":49},{"ruleId":"845","severity":1,"message":"846","line":34,"column":7,"nodeType":"847","messageId":"848","endLine":34,"endColumn":18},{"ruleId":"824","replacedBy":"825"},{"ruleId":"826","replacedBy":"827"},{"ruleId":"828","replacedBy":"829"},{"ruleId":"830","replacedBy":"831"},{"ruleId":"832","replacedBy":"833"},{"ruleId":"834","severity":1,"message":"857","line":14,"column":16,"nodeType":"836","messageId":"837","endLine":14,"endColumn":21},{"ruleId":"859","severity":1,"message":"860","line":45,"column":20,"nodeType":"836","messageId":"861","endLine":45,"endColumn":30},{"ruleId":"845","severity":1,"message":"846","line":47,"column":13,"nodeType":"847","messageId":"848","endLine":47,"endColumn":24},{"ruleId":"859","severity":1,"message":"862","line":55,"column":29,"nodeType":"836","messageId":"861","endLine":55,"endColumn":46},{"ruleId":"834","severity":1,"message":"863","line":68,"column":22,"nodeType":"836","messageId":"837","endLine":68,"endColumn":23},{"ruleId":"834","severity":1,"message":"864","line":20,"column":40,"nodeType":"836","messageId":"837","endLine":20,"endColumn":46},{"ruleId":"834","severity":1,"message":"865","line":5,"column":8,"nodeType":"836","messageId":"837","endLine":5,"endColumn":20},{"ruleId":"834","severity":1,"message":"866","line":18,"column":9,"nodeType":"836","messageId":"837","endLine":18,"endColumn":14},{"ruleId":"834","severity":1,"message":"867","line":16,"column":10,"nodeType":"836","messageId":"837","endLine":16,"endColumn":17},{"ruleId":"834","severity":1,"message":"868","line":4,"column":10,"nodeType":"836","messageId":"837","endLine":4,"endColumn":25},{"ruleId":"834","severity":1,"message":"869","line":3,"column":15,"nodeType":"836","messageId":"837","endLine":3,"endColumn":36},{"ruleId":"834","severity":1,"message":"870","line":3,"column":66,"nodeType":"836","messageId":"837","endLine":3,"endColumn":69},{"ruleId":"834","severity":1,"message":"871","line":3,"column":71,"nodeType":"836","messageId":"837","endLine":3,"endColumn":79},{"ruleId":"845","severity":1,"message":"846","line":19,"column":17,"nodeType":"847","messageId":"848","endLine":19,"endColumn":28},"lines-around-directive",["872"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"@typescript-eslint/no-unused-vars","'useModal' is defined but never used.","Identifier","unusedVar","'VersionBar' is defined but never used.","'UseV2ExchangeModal' is defined but never used.","'Menu' is defined but never used.","'fetchTranslationsForSelectedLanguage' is assigned a value but never used.","'styled' is defined but never used.","'CardNav' is defined but never used.","'onAttemptToApprove' is defined but never used.","no-console","Unexpected console statement.","MemberExpression","unexpected","'ArrowDownIcon' is defined but never used.","'TradePrice' is defined but never used.","'INITIAL_ALLOWED_SLIPPAGE' is defined but never used.","'PageHeader' is defined but never used.","'showInverted' is assigned a value but never used.","'setShowInverted' is assigned a value but never used.","'StyledInternalLink' is defined but never used.","'useEffect' is defined but never used.","'props' is defined but never used.","'_chainId' is defined but never used.","@typescript-eslint/no-use-before-define","'initialize' was used before it was defined.","noUseBeforeDefine","'getPromiseBalance' was used before it was defined.","'e' is defined but never used.","'reject' is defined but never used.","'AudioSetting' is defined but never used.","'theme' is assigned a value but never used.","'AutoRow' is defined but never used.","'TranslateString' is defined but never used.","'PNFT_CONTRACT_ADDRESS' is defined but never used.","'gas' is defined but never used.","'gasPrice' is defined but never used.","padding-line-between-statements"]